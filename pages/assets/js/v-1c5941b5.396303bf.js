"use strict";(self.webpackChunkfrontdocs=self.webpackChunkfrontdocs||[]).push([[792],{1634:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-1c5941b5",path:"/baselang/javascript.html",title:"JavaScript 规范",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前言",slug:"前言",children:[]},{level:2,title:"代码文件",slug:"代码文件",children:[]},{level:2,title:"细则",slug:"细则",children:[]},{level:2,title:"关于分号",slug:"关于分号",children:[]}],filePathRelative:"baselang/javascript.md",git:{updatedTime:162997515e4,contributors:[{name:"velen.zhang",email:"896662364@qq.com",commits:1}]}}},240:(n,s,a)=>{a.r(s),a.d(s,{default:()=>iu});var e=a(6252);const p=(0,e.uE)('<h1 id="javascript-规范" tabindex="-1"><a class="header-anchor" href="#javascript-规范" aria-hidden="true">#</a> JavaScript 规范</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>JavaScript 在前端一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使 JavaScript 代码风格保持一致，容易被理解和被维护。</p><p>虽然本文档是针对 JavaScript 设计的，但是在使用各种 JavaScript 的预编译语言时(如 TypeScript 等)时，适用的部分也应尽量遵循本文档的约定。</p><h2 id="代码文件" tabindex="-1"><a class="header-anchor" href="#代码文件" aria-hidden="true">#</a> 代码文件</h2><ul><li>JavaScript 文件使用无<code>BOM</code>的<code>UTF-8</code>编码</li><li>在文件结尾处，保留一个空行</li></ul>',6),l=(0,e.Uk)("更加详细的"),t=(0,e._)("strong",null,"编辑器",-1),o=(0,e.Uk)("及"),c=(0,e._)("strong",null,"代码文件",-1),r=(0,e.Uk)("推荐"),u=(0,e.Uk)("传送门"),i=(0,e._)("h2",{id:"细则",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#细则","aria-hidden":"true"},"#"),(0,e.Uk)(" 细则")],-1),k=(0,e._)("p",null,[(0,e._)("strong",null,"使用两个空格"),(0,e.Uk)("进行缩进。")],-1),m=(0,e.Uk)("eslint: "),d={href:"http://eslint.org/docs/rules/indent",target:"_blank",rel:"noopener noreferrer"},b=(0,e._)("code",null,"indent",-1),g=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hello</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),v=(0,e._)("p",null,[(0,e.Uk)("除需要转义的情况外，"),(0,e._)("strong",null,"字符串统一使用单引号"),(0,e.Uk)("。")],-1),_=(0,e.Uk)("eslint: "),f={href:"http://eslint.org/docs/rules/quotes",target:"_blank",rel:"noopener noreferrer"},j=(0,e._)("code",null,"quotes",-1),h=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello there&#39;</span><span class="token punctuation">)</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;div class=&#39;box&#39;&gt;&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),w=(0,e._)("p",null,[(0,e._)("strong",null,"不要定义未使用的变量"),(0,e.Uk)("。")],-1),y=(0,e.Uk)("eslint: "),U={href:"http://eslint.org/docs/rules/no-unused-vars",target:"_blank",rel:"noopener noreferrer"},x=(0,e._)("code",null,"no-unused-vars",-1),E=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),W=(0,e._)("p",null,[(0,e._)("strong",null,"关键字后面加空格"),(0,e.Uk)("。")],-1),q=(0,e.Uk)("eslint: "),F={href:"http://eslint.org/docs/rules/keyword-spacing",target:"_blank",rel:"noopener noreferrer"},J=(0,e._)("code",null,"keyword-spacing",-1),S=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),N=(0,e._)("p",null,[(0,e._)("strong",null,"函数声明时括号与函数名间加空格"),(0,e.Uk)("。")],-1),D=(0,e.Uk)("eslint: "),O={href:"http://eslint.org/docs/rules/space-before-function-paren",target:"_blank",rel:"noopener noreferrer"},A=(0,e._)("code",null,"space-before-function-paren",-1),H=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment">// ✓ ok</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),C=(0,e._)("p",null,[(0,e._)("strong",null,"始终使用"),(0,e.Uk)(),(0,e._)("code",null,"==="),(0,e.Uk)(" 替代 "),(0,e._)("code",null,"=="),(0,e.Uk)("。 例外： "),(0,e._)("code",null,"obj == null"),(0,e.Uk)(" 可以用来检查 "),(0,e._)("code",null,"null || undefined"),(0,e.Uk)("。")],-1),R=(0,e.Uk)("eslint: "),T={href:"http://eslint.org/docs/rules/eqeqeq",target:"_blank",rel:"noopener noreferrer"},z=(0,e._)("code",null,"eqeqeq",-1),$=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),I=(0,e._)("p",null,[(0,e._)("strong",null,"字符串拼接操作符 (Infix operators)"),(0,e.Uk)(" 之间要留空格。")],-1),M=(0,e.Uk)("eslint: "),P={href:"http://eslint.org/docs/rules/space-infix-ops",target:"_blank",rel:"noopener noreferrer"},B=(0,e._)("code",null,"space-infix-ops",-1),L=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">2</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello, &#39;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&#39;!&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',2),V=(0,e._)("p",null,[(0,e._)("strong",null,"逗号后面加空格"),(0,e.Uk)("。")],-1),Y=(0,e.Uk)("eslint: "),G={href:"http://eslint.org/docs/rules/comma-spacing",target:"_blank",rel:"noopener noreferrer"},K=(0,e._)("code",null,"comma-spacing",-1),Q=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">greet</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">greet</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',2),X=(0,e._)("p",null,[(0,e._)("strong",null,"else 关键字要与花括号"),(0,e.Uk)("保持在同一行。")],-1),Z=(0,e.Uk)("eslint: "),nn={href:"http://eslint.org/docs/rules/brace-style",target:"_blank",rel:"noopener noreferrer"},sn=(0,e._)("code",null,"brace-style",-1),an=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2),en=(0,e._)("p",null,[(0,e._)("strong",null,"多行 if 语句的"),(0,e.Uk)("的括号不能省。")],-1),pn=(0,e.Uk)("eslint: "),ln={href:"http://eslint.org/docs/rules/curly",target:"_blank",rel:"noopener noreferrer"},tn=(0,e._)("code",null,"curly",-1),on=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),cn=(0,e._)("p",null,[(0,e._)("strong",null,"不要丢掉"),(0,e.Uk)("异常处理中"),(0,e._)("code",null,"err"),(0,e.Uk)("参数。")],-1),rn=(0,e.Uk)("eslint: "),un={href:"http://eslint.org/docs/rules/handle-callback-err",target:"_blank",rel:"noopener noreferrer"},kn=(0,e._)("code",null,"handle-callback-err",-1),mn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),dn=(0,e._)("p",null,[(0,e._)("strong",null,"使用浏览器全局变量时加上"),(0,e.Uk)(),(0,e._)("code",null,"window."),(0,e.Uk)(" 前缀。 Exceptions are: "),(0,e._)("code",null,"document"),(0,e.Uk)(", "),(0,e._)("code",null,"console"),(0,e.Uk)(" and "),(0,e._)("code",null,"navigator"),(0,e.Uk)(".")],-1),bn=(0,e.Uk)("eslint: "),gn={href:"http://eslint.org/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"},vn=(0,e._)("code",null,"no-undef",-1),_n=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),fn=(0,e._)("p",null,[(0,e._)("strong",null,"不允许有连续多行空行"),(0,e.Uk)("。")],-1),jn=(0,e.Uk)("eslint: "),hn={href:"http://eslint.org/docs/rules/no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"},wn=(0,e._)("code",null,"no-multiple-empty-lines",-1),yn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>\n\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),Un=(0,e._)("p",null,[(0,e._)("strong",null,"对于三元运算符"),(0,e.Uk)(),(0,e._)("code",null,"?"),(0,e.Uk)(" 和 "),(0,e._)("code",null,":"),(0,e.Uk)(" 与他们所负责的代码处于同一行")],-1),xn=(0,e.Uk)("eslint: "),En={href:"http://eslint.org/docs/rules/operator-linebreak",target:"_blank",rel:"noopener noreferrer"},Wn=(0,e._)("code",null,"operator-linebreak",-1),qn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development <span class="token operator">?</span> <span class="token string">&#39;localhost&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;www.api.com&#39;</span>\n\n<span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development\n  <span class="token operator">?</span> <span class="token string">&#39;localhost&#39;</span>\n  <span class="token operator">:</span> <span class="token string">&#39;www.api.com&#39;</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development <span class="token operator">?</span>\n  <span class="token string">&#39;localhost&#39;</span> <span class="token operator">:</span>\n  <span class="token string">&#39;www.api.com&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),Fn=(0,e._)("p",null,[(0,e._)("strong",null,"每个 var 关键字"),(0,e.Uk)("单独声明一个变量。")],-1),Jn=(0,e.Uk)("eslint: "),Sn={href:"http://eslint.org/docs/rules/one-var",target:"_blank",rel:"noopener noreferrer"},Nn=(0,e._)("code",null,"one-var",-1),Dn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">var</span> verbose <span class="token operator">=</span> <span class="token boolean">true</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> verbose <span class="token operator">=</span> <span class="token boolean">true</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    verbose <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',1),On=(0,e._)("p",null,[(0,e._)("strong",null,"条件语句中赋值语句"),(0,e.Uk)("使用括号包起来。这样使得代码更加清晰可读，而不会认为是将条件判断语句的全等号（"),(0,e._)("code",null,"==="),(0,e.Uk)("）错写成了等号（"),(0,e._)("code",null,"="),(0,e.Uk)("）。")],-1),An=(0,e.Uk)("eslint: "),Hn={href:"http://eslint.org/docs/rules/no-cond-assign",target:"_blank",rel:"noopener noreferrer"},Cn=(0,e._)("code",null,"no-cond-assign",-1),Rn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),Tn=(0,e._)("p",null,[(0,e._)("strong",null,"单行代码块两边加空格"),(0,e.Uk)("。")],-1),zn=(0,e.Uk)("eslint: "),$n={href:"http://eslint.org/docs/rules/block-spacing",target:"_blank",rel:"noopener noreferrer"},In=(0,e._)("code",null,"block-spacing",-1),Mn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Pn=(0,e._)("p",null,[(0,e._)("strong",null,"对于变量和函数名统一使用驼峰命名法"),(0,e.Uk)("。")],-1),Bn=(0,e.Uk)("eslint: "),Ln={href:"http://eslint.org/docs/rules/camelcase",target:"_blank",rel:"noopener noreferrer"},Vn=(0,e._)("code",null,"camelcase",-1),Yn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">my_function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>\n\n  <span class="token keyword">var</span> my_var <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>           <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">var</span> myVar <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>            <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Gn=(0,e._)("p",null,[(0,e._)("strong",null,"不允许有多余的行末逗号"),(0,e.Uk)("。")],-1),Kn=(0,e.Uk)("eslint: "),Qn={href:"http://eslint.org/docs/rules/comma-dangle",target:"_blank",rel:"noopener noreferrer"},Xn=(0,e._)("code",null,"comma-dangle",-1),Zn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),ns=(0,e._)("p",null,[(0,e._)("strong",null,"始终将逗号置于行末"),(0,e.Uk)("。")],-1),ss=(0,e.Uk)("eslint: "),as={href:"http://eslint.org/docs/rules/comma-style",target:"_blank",rel:"noopener noreferrer"},es=(0,e._)("code",null,"comma-style",-1),ps=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>\n    <span class="token punctuation">,</span>bar<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>\n    bar<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>   <span class="token comment">// ✓ ok</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),ls=(0,e._)("p",null,[(0,e._)("strong",null,"点号操作符须与属性需在同一行"),(0,e.Uk)("。")],-1),ts=(0,e.Uk)("eslint: "),os={href:"http://eslint.org/docs/rules/dot-location",target:"_blank",rel:"noopener noreferrer"},cs=(0,e._)("code",null,"dot-location",-1),rs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  console<span class="token punctuation">.</span>\n    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// ✗ avoid</span>\n\n  console\n    <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),us=(0,e._)("p",null,[(0,e._)("strong",null,"文件末尾留一空行"),(0,e.Uk)("。")],-1),is=(0,e.Uk)("eslint: "),ks={href:"http://eslint.org/docs/rules/eol-last",target:"_blank",rel:"noopener noreferrer"},ms=(0,e._)("code",null,"eol-last",-1),ds=(0,e._)("p",null,[(0,e._)("strong",null,"函数调用时标识符与括号间不留间隔"),(0,e.Uk)("。")],-1),bs=(0,e.Uk)("eslint: "),gs={href:"http://eslint.org/docs/rules/func-call-spacing",target:"_blank",rel:"noopener noreferrer"},vs=(0,e._)("code",null,"func-call-spacing",-1),_s=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ✗ avoid</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),fs=(0,e._)("p",null,[(0,e._)("strong",null,"键值对当中冒号与值之间要留空白"),(0,e.Uk)("。")],-1),js=(0,e.Uk)("eslint: "),hs={href:"http://eslint.org/docs/rules/key-spacing",target:"_blank",rel:"noopener noreferrer"},ws=(0,e._)("code",null,"key-spacing",-1),ys=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span> <span class="token operator">:</span><span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span><span class="token operator">:</span><span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Us=(0,e._)("p",null,[(0,e._)("strong",null,"构造函数要以大写字母开头"),(0,e.Uk)("。")],-1),xs=(0,e.Uk)("eslint: "),Es={href:"http://eslint.org/docs/rules/new-cap",target:"_blank",rel:"noopener noreferrer"},Ws=(0,e._)("code",null,"new-cap",-1),qs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Fs=(0,e._)("p",null,[(0,e._)("strong",null,"无参的构造函数调用时要带上括号"),(0,e.Uk)("。")],-1),Js=(0,e.Uk)("eslint: "),Ss={href:"http://eslint.org/docs/rules/new-parens",target:"_blank",rel:"noopener noreferrer"},Ns=(0,e._)("code",null,"new-parens",-1),Ds=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),Os=(0,e._)("p",null,[(0,e._)("strong",null,"对象中定义了存值器，一定要对应的定义取值器"),(0,e.Uk)("。")],-1),As=(0,e.Uk)("eslint: "),Hs={href:"http://eslint.org/docs/rules/accessor-pairs",target:"_blank",rel:"noopener noreferrer"},Cs=(0,e._)("code",null,"accessor-pairs",-1),Rs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">set</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ✗ avoid</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">set</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// ✓ ok</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',1),Ts=(0,e._)("p",null,[(0,e._)("strong",null,"子类的构造器中一定要调用 super")],-1),zs=(0,e.Uk)("eslint: "),$s={href:"http://eslint.org/docs/rules/constructor-super",target:"_blank",rel:"noopener noreferrer"},Is=(0,e._)("code",null,"constructor-super",-1),Ms=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Mammal</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),Ps=(0,e._)("p",null,[(0,e._)("strong",null,"使用数组字面量而不是构造器"),(0,e.Uk)("。")],-1),Bs=(0,e.Uk)("eslint: "),Ls={href:"http://eslint.org/docs/rules/no-array-constructor",target:"_blank",rel:"noopener noreferrer"},Vs=(0,e._)("code",null,"no-array-constructor",-1),Ys=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>            <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Gs=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用 arguments.callee 和 arguments.caller"),(0,e.Uk)("。")],-1),Ks=(0,e.Uk)("eslint: "),Qs={href:"http://eslint.org/docs/rules/no-caller",target:"_blank",rel:"noopener noreferrer"},Xs=(0,e._)("code",null,"no-caller",-1),Zs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n  arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n  <span class="token function">foo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),na=(0,e._)("p",null,[(0,e._)("strong",null,"避免对类名重新赋值"),(0,e.Uk)("。")],-1),sa=(0,e.Uk)("eslint: "),aa={href:"http://eslint.org/docs/rules/no-class-assign",target:"_blank",rel:"noopener noreferrer"},ea=(0,e._)("code",null,"no-class-assign",-1),pa=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nDog <span class="token operator">=</span> <span class="token string">&#39;Fido&#39;</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),la=(0,e._)("p",null,[(0,e._)("strong",null,"避免修改使用 const 声明的变量"),(0,e.Uk)("。")],-1),ta=(0,e.Uk)("eslint: "),oa={href:"http://eslint.org/docs/rules/no-const-assign",target:"_blank",rel:"noopener noreferrer"},ca=(0,e._)("code",null,"no-const-assign",-1),ra=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">100</span>\nscore <span class="token operator">=</span> <span class="token number">125</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ua=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用常量作为条件表达式的条件（循环语句除外）"),(0,e.Uk)("。")],-1),ia=(0,e.Uk)("eslint: "),ka={href:"http://eslint.org/docs/rules/no-constant-condition",target:"_blank",rel:"noopener noreferrer"},ma=(0,e._)("code",null,"no-constant-condition",-1),da=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),ba=(0,e._)("p",null,[(0,e._)("strong",null,"正则中不要使用控制符"),(0,e.Uk)("。")],-1),ga=(0,e.Uk)("eslint: "),va={href:"http://eslint.org/docs/rules/no-control-regex",target:"_blank",rel:"noopener noreferrer"},_a=(0,e._)("code",null,"no-control-regex",-1),fa=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\x1f</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\x20</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ja=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用 debugger"),(0,e.Uk)("。")],-1),ha=(0,e.Uk)("eslint: "),wa={href:"http://eslint.org/docs/rules/no-debugger",target:"_blank",rel:"noopener noreferrer"},ya=(0,e._)("code",null,"no-debugger",-1),Ua=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">debugger</span>      <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),xa=(0,e._)("p",null,[(0,e._)("strong",null,"不要对变量使用 delete 操作"),(0,e.Uk)("。")],-1),Ea=(0,e.Uk)("eslint: "),Wa={href:"http://eslint.org/docs/rules/no-delete-var",target:"_blank",rel:"noopener noreferrer"},qa=(0,e._)("code",null,"no-delete-var",-1),Fa=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name\n<span class="token keyword">delete</span> name     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Ja=(0,e._)("p",null,[(0,e._)("strong",null,"不要定义冗余的函数参数"),(0,e.Uk)("。")],-1),Sa=(0,e.Uk)("eslint: "),Na={href:"http://eslint.org/docs/rules/no-dupe-args",target:"_blank",rel:"noopener noreferrer"},Da=(0,e._)("code",null,"no-dupe-args",-1),Oa=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✗ avoid</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Aa=(0,e._)("p",null,[(0,e._)("strong",null,"类中不要定义冗余的属性"),(0,e.Uk)("。")],-1),Ha=(0,e.Uk)("eslint: "),Ca={href:"http://eslint.org/docs/rules/no-dupe-class-members",target:"_blank",rel:"noopener noreferrer"},Ra=(0,e._)("code",null,"no-dupe-class-members",-1),Ta=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  <span class="token function">bark</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">bark</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),za=(0,e._)("p",null,[(0,e._)("strong",null,"对象字面量中不要定义重复的属性"),(0,e.Uk)("。")],-1),$a=(0,e.Uk)("eslint: "),Ia={href:"http://eslint.org/docs/rules/no-dupe-keys",target:"_blank",rel:"noopener noreferrer"},Ma=(0,e._)("code",null,"no-dupe-keys",-1),Pa=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Ba=(0,e._)("p",null,[(0,e._)("strong",null,"switch 语句中不要定义重复的 case 分支"),(0,e.Uk)("。")],-1),La=(0,e.Uk)("eslint: "),Va={href:"http://eslint.org/docs/rules/no-duplicate-case",target:"_blank",rel:"noopener noreferrer"},Ya=(0,e._)("code",null,"no-duplicate-case",-1),Ga=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token comment">// ...</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Ka=(0,e._)("p",null,[(0,e._)("strong",null,"同一模块有多个导入时一次性写完"),(0,e.Uk)("。")],-1),Qa=(0,e.Uk)("eslint: "),Xa={href:"http://eslint.org/docs/rules/no-duplicate-imports",target:"_blank",rel:"noopener noreferrer"},Za=(0,e._)("code",null,"no-duplicate-imports",-1),ne=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span>          <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc1<span class="token punctuation">,</span> myFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span> <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),se=(0,e._)("p",null,[(0,e._)("strong",null,"正则中不要使用空字符"),(0,e.Uk)("。")],-1),ae=(0,e.Uk)("eslint: "),ee={href:"http://eslint.org/docs/rules/no-empty-character-class",target:"_blank",rel:"noopener noreferrer"},pe=(0,e._)("code",null,"no-empty-character-class",-1),le=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc[]</span><span class="token regex-delimiter">/</span></span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> myRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc[a-z]</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),te=(0,e._)("p",null,[(0,e._)("strong",null,"不要解构空值"),(0,e.Uk)("。")],-1),oe=(0,e.Uk)("eslint: "),ce={href:"http://eslint.org/docs/rules/no-empty-pattern",target:"_blank",rel:"noopener noreferrer"},re=(0,e._)("code",null,"no-empty-pattern",-1),ue=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> foo         <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token punctuation">{</span> b <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> foo      <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ie=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用 eval()"),(0,e.Uk)("。")],-1),ke=(0,e.Uk)("eslint: "),me={href:"http://eslint.org/docs/rules/no-eval",target:"_blank",rel:"noopener noreferrer"},de=(0,e._)("code",null,"no-eval",-1),be=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span> <span class="token string">&quot;var result = user.&quot;</span> <span class="token operator">+</span> propName <span class="token punctuation">)</span> <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> user<span class="token punctuation">[</span>propName<span class="token punctuation">]</span>             <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ge=(0,e._)("p",null,[(0,e._)("strong",null,"catch 中不要对错误重新赋值"),(0,e.Uk)("。")],-1),ve=(0,e.Uk)("eslint: "),_e={href:"http://eslint.org/docs/rules/no-ex-assign",target:"_blank",rel:"noopener noreferrer"},fe=(0,e._)("code",null,"no-ex-assign",-1),je=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  e <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>             <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>  <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),he=(0,e._)("p",null,[(0,e._)("strong",null,"不要扩展原生对象"),(0,e.Uk)("。")],-1),we=(0,e.Uk)("eslint: "),ye={href:"http://eslint.org/docs/rules/no-extend-native",target:"_blank",rel:"noopener noreferrer"},Ue=(0,e._)("code",null,"no-extend-native",-1),xe=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Ee=(0,e._)("p",null,[(0,e._)("strong",null,"避免多余的函数上下文绑定"),(0,e.Uk)("。")],-1),We=(0,e.Uk)("eslint: "),qe={href:"http://eslint.org/docs/rules/no-extra-bind",target:"_blank",rel:"noopener noreferrer"},Fe=(0,e._)("code",null,"no-extra-bind",-1),Je=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Se=(0,e._)("p",null,[(0,e._)("strong",null,"避免不必要的布尔转换"),(0,e.Uk)("。")],-1),Ne=(0,e.Uk)("eslint: "),De={href:"http://eslint.org/docs/rules/no-extra-boolean-cast",target:"_blank",rel:"noopener noreferrer"},Oe=(0,e._)("code",null,"no-extra-boolean-cast",-1),Ae=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),He=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用多余的括号包裹函数"),(0,e.Uk)("。")],-1),Ce=(0,e.Uk)("eslint: "),Re={href:"http://eslint.org/docs/rules/no-extra-parens",target:"_blank",rel:"noopener noreferrer"},Te=(0,e._)("code",null,"no-extra-parens",-1),ze=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),$e=(0,e._)("p",null,[(0,e._)("strong",null,"switch 一定要使用 break 来将条件分支正常中断"),(0,e.Uk)("。")],-1),Ie=(0,e.Uk)("eslint: "),Me={href:"http://eslint.org/docs/rules/no-fallthrough",target:"_blank",rel:"noopener noreferrer"},Pe=(0,e._)("code",null,"no-fallthrough",-1),Be=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">break</span>           <span class="token comment">// ✓ ok</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// fallthrough  // ✓ ok</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',1),Le=(0,e._)("p",null,[(0,e._)("strong",null,"不要省去小数点前面的0"),(0,e.Uk)("。")],-1),Ve=(0,e.Uk)("eslint: "),Ye={href:"http://eslint.org/docs/rules/no-floating-decimal",target:"_blank",rel:"noopener noreferrer"},Ge=(0,e._)("code",null,"no-floating-decimal",-1),Ke=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> discount <span class="token operator">=</span> <span class="token number">.5</span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> discount <span class="token operator">=</span> <span class="token number">0.5</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Qe=(0,e._)("p",null,[(0,e._)("strong",null,"避免对声明过的函数重新赋值"),(0,e.Uk)("。")],-1),Xe=(0,e.Uk)("eslint: "),Ze={href:"http://eslint.org/docs/rules/no-func-assign",target:"_blank",rel:"noopener noreferrer"},np=(0,e._)("code",null,"no-func-assign",-1),sp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\nmyFunc <span class="token operator">=</span> myOtherFunc    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ap=(0,e._)("p",null,[(0,e._)("strong",null,"不要对全局只读对象重新赋值"),(0,e.Uk)("。")],-1),ep=(0,e.Uk)("eslint: "),pp={href:"http://eslint.org/docs/rules/no-global-assign",target:"_blank",rel:"noopener noreferrer"},lp=(0,e._)("code",null,"no-global-assign",-1),tp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),op=(0,e._)("p",null,[(0,e._)("strong",null,"注意隐式的 eval()"),(0,e.Uk)("。")],-1),cp=(0,e.Uk)("eslint: "),rp={href:"http://eslint.org/docs/rules/no-implied-eval",target:"_blank",rel:"noopener noreferrer"},up=(0,e._)("code",null,"no-implied-eval",-1),ip=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">&quot;alert(&#39;Hello world&#39;)&quot;</span><span class="token punctuation">)</span>                   <span class="token comment">// ✗ avoid</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),kp=(0,e._)("p",null,[(0,e._)("strong",null,"嵌套的代码块中禁止再定义函数"),(0,e.Uk)("。")],-1),mp=(0,e.Uk)("eslint: "),dp={href:"http://eslint.org/docs/rules/no-inner-declarations",target:"_blank",rel:"noopener noreferrer"},bp=(0,e._)("code",null,"no-inner-declarations",-1),gp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">setAuthUser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),vp=(0,e._)("p",null,[(0,e._)("strong",null,"不要向 RegExp 构造器传入非法的正则表达式"),(0,e.Uk)("。")],-1),_p=(0,e.Uk)("eslint: "),fp={href:"http://eslint.org/docs/rules/no-invalid-regexp",target:"_blank",rel:"noopener noreferrer"},jp=(0,e._)("code",null,"no-invalid-regexp",-1),hp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[a-z&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),wp=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用非法的空白符"),(0,e.Uk)("。")],-1),yp=(0,e.Uk)("eslint: "),Up={href:"http://eslint.org/docs/rules/no-irregular-whitespace",target:"_blank",rel:"noopener noreferrer"},xp=(0,e._)("code",null,"no-irregular-whitespace",-1),Ep=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/*&lt;NBSP&gt;*/</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Wp=(0,e._)("p",null,[(0,e._)("strong",null,[(0,e.Uk)("禁止使用 "),(0,e._)("strong",null,"iterator")]),(0,e.Uk)("。")],-1),qp=(0,e.Uk)("eslint: "),Fp={href:"http://eslint.org/docs/rules/no-iterator",target:"_blank",rel:"noopener noreferrer"},Jp=(0,e._)("code",null,"no-iterator",-1),Sp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">__iterator__</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Np=(0,e._)("p",null,[(0,e._)("strong",null,"外部变量不要与对象属性重名"),(0,e.Uk)("。")],-1),Dp=(0,e.Uk)("eslint: "),Op={href:"http://eslint.org/docs/rules/no-label-var",target:"_blank",rel:"noopener noreferrer"},Ap=(0,e._)("code",null,"no-label-var",-1),Hp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token keyword">function</span> <span class="token function">game</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  score<span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ✗ avoid</span>\n    score <span class="token operator">-=</span> <span class="token number">10</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> score\n    <span class="token keyword">break</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),Cp=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用标签语句"),(0,e.Uk)("。")],-1),Rp=(0,e.Uk)("eslint: "),Tp={href:"http://eslint.org/docs/rules/no-labels",target:"_blank",rel:"noopener noreferrer"},zp=(0,e._)("code",null,"no-labels",-1),$p=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>label<span class="token operator">:</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">break</span> label     <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Ip=(0,e._)("p",null,[(0,e._)("strong",null,"不要书写不必要的嵌套代码块"),(0,e.Uk)("。")],-1),Mp=(0,e.Uk)("eslint: "),Pp={href:"http://eslint.org/docs/rules/no-lone-blocks",target:"_blank",rel:"noopener noreferrer"},Bp=(0,e._)("code",null,"no-lone-blocks",-1),Lp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>                   <span class="token comment">// ✗ avoid</span>\n    <span class="token function">myOtherFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">myOtherFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),Vp=(0,e._)("p",null,[(0,e._)("strong",null,"不要混合使用空格与制表符作为缩进"),(0,e.Uk)("。")],-1),Yp=(0,e.Uk)("eslint: "),Gp={href:"http://eslint.org/docs/rules/no-mixed-spaces-and-tabs",target:"_blank",rel:"noopener noreferrer"},Kp=(0,e._)("code",null,"no-mixed-spaces-and-tabs",-1),Qp=(0,e._)("p",null,[(0,e._)("strong",null,"除了缩进，不要使用多个空格"),(0,e.Uk)("。")],-1),Xp=(0,e.Uk)("eslint: "),Zp={href:"http://eslint.org/docs/rules/no-multi-spaces",target:"_blank",rel:"noopener noreferrer"},nl=(0,e._)("code",null,"no-multi-spaces",-1),sl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> id <span class="token operator">=</span>    <span class="token number">1234</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token number">1234</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),al=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用多行字符串"),(0,e.Uk)("。")],-1),el=(0,e.Uk)("eslint: "),pl={href:"http://eslint.org/docs/rules/no-multi-str",target:"_blank",rel:"noopener noreferrer"},ll=(0,e._)("code",null,"no-multi-str",-1),tl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello \\\n                 world&#39;</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ol=(0,e._)("p",null,[(0,e._)("strong",null,"new 创建对象实例后需要赋值给变量"),(0,e.Uk)("。")],-1),cl=(0,e.Uk)("eslint: "),rl={href:"http://eslint.org/docs/rules/no-new",target:"_blank",rel:"noopener noreferrer"},ul=(0,e._)("code",null,"no-new",-1),il=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> character <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),kl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 Function 构造器"),(0,e.Uk)("。")],-1),ml=(0,e.Uk)("eslint: "),dl={href:"http://eslint.org/docs/rules/no-new-func",target:"_blank",rel:"noopener noreferrer"},bl=(0,e._)("code",null,"no-new-func",-1),gl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),vl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 Object 构造器"),(0,e.Uk)("。")],-1),_l=(0,e.Uk)("eslint: "),fl={href:"http://eslint.org/docs/rules/no-new-object",target:"_blank",rel:"noopener noreferrer"},jl=(0,e._)("code",null,"no-new-object",-1),hl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),wl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 new require"),(0,e.Uk)("。")],-1),yl=(0,e.Uk)("eslint: "),Ul={href:"http://eslint.org/docs/rules/no-new-require",target:"_blank",rel:"noopener noreferrer"},xl=(0,e._)("code",null,"no-new-require",-1),El=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">require</span><span class="token punctuation">(</span><span class="token string">&#39;my-module&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Wl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 Symbol 构造器"),(0,e.Uk)("。")],-1),ql=(0,e.Uk)("eslint: "),Fl={href:"http://eslint.org/docs/rules/no-new-symbol",target:"_blank",rel:"noopener noreferrer"},Jl=(0,e._)("code",null,"no-new-symbol",-1),Sl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Nl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用原始包装器"),(0,e.Uk)("。")],-1),Dl=(0,e.Uk)("eslint: "),Ol={href:"http://eslint.org/docs/rules/no-new-wrappers",target:"_blank",rel:"noopener noreferrer"},Al=(0,e._)("code",null,"no-new-wrappers",-1),Hl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Cl=(0,e._)("p",null,[(0,e._)("strong",null,"不要将全局对象的属性作为函数调用"),(0,e.Uk)("。")],-1),Rl=(0,e.Uk)("eslint: "),Tl={href:"http://eslint.org/docs/rules/no-obj-calls",target:"_blank",rel:"noopener noreferrer"},zl=(0,e._)("code",null,"no-obj-calls",-1),$l=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Il=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用八进制字面量"),(0,e.Uk)("。")],-1),Ml=(0,e.Uk)("eslint: "),Pl={href:"http://eslint.org/docs/rules/no-octal",target:"_blank",rel:"noopener noreferrer"},Bl=(0,e._)("code",null,"no-octal",-1),Ll=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">042</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token string">&#39;042&#39;</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Vl=(0,e._)("p",null,[(0,e._)("strong",null,"字符串字面量中也不要使用八进制转义字符"),(0,e.Uk)("。")],-1),Yl=(0,e.Uk)("eslint: "),Gl={href:"http://eslint.org/docs/rules/no-octal-escape",target:"_blank",rel:"noopener noreferrer"},Kl=(0,e._)("code",null,"no-octal-escape",-1),Ql=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copyright <span class="token operator">=</span> <span class="token string">&#39;Copyright \\251&#39;</span>  <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Xl=(0,e._)("p",null,[(0,e._)("strong",null,"使用 __dirname 和 __filename 时尽量避免使用字符串拼接"),(0,e.Uk)("。")],-1),Zl=(0,e.Uk)("eslint: "),nt={href:"http://eslint.org/docs/rules/no-path-concat",target:"_blank",rel:"noopener noreferrer"},st=(0,e._)("code",null,"no-path-concat",-1),at=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pathToFile <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/app.js&#39;</span>            <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> pathToFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;app.js&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),et=(0,e._)("p",null,[(0,e.Uk)("使用 "),(0,e._)("code",null,"getPrototypeOf"),(0,e.Uk)(" 来替代 "),(0,e._)("strong",null,[(0,e._)("strong",null,"proto")]),(0,e.Uk)("。")],-1),pt=(0,e.Uk)("eslint: "),lt={href:"http://eslint.org/docs/rules/no-proto",target:"_blank",rel:"noopener noreferrer"},tt=(0,e._)("code",null,"no-proto",-1),ot=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__               <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ct=(0,e._)("p",null,[(0,e._)("strong",null,"不要重复声明变量"),(0,e.Uk)("。")],-1),rt=(0,e.Uk)("eslint: "),ut={href:"http://eslint.org/docs/rules/no-redeclare",target:"_blank",rel:"noopener noreferrer"},it=(0,e._)("code",null,"no-redeclare",-1),kt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Jane&#39;</span>     <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>\nname <span class="token operator">=</span> <span class="token string">&#39;Jane&#39;</span>         <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),mt=(0,e._)("p",null,[(0,e._)("strong",null,"正则中避免使用多个空格"),(0,e.Uk)("。")],-1),dt=(0,e.Uk)("eslint: "),bt={href:"http://eslint.org/docs/rules/no-regex-spaces",target:"_blank",rel:"noopener noreferrer"},gt=(0,e._)("code",null,"no-regex-spaces",-1),vt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test   value</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test {3}value</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">// ✓ ok</span>\n<span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test value</span><span class="token regex-delimiter">/</span></span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),_t=(0,e._)("p",null,[(0,e._)("strong",null,"return 语句中的赋值必需有括号包裹"),(0,e.Uk)("。")],-1),ft=(0,e.Uk)("eslint: "),jt={href:"http://eslint.org/docs/rules/no-return-assign",target:"_blank",rel:"noopener noreferrer"},ht=(0,e._)("code",null,"no-return-assign",-1),wt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),yt=(0,e._)("p",null,[(0,e._)("strong",null,"避免将变量赋值给自己"),(0,e.Uk)("。")],-1),Ut=(0,e.Uk)("eslint: "),xt={href:"http://eslint.org/docs/rules/no-self-assign",target:"_blank",rel:"noopener noreferrer"},Et=(0,e._)("code",null,"no-self-assign",-1),Wt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>name <span class="token operator">=</span> name   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),qt=(0,e._)("p",null,[(0,e._)("strong",null,"避免将变量与自己进行比较操作"),(0,e.Uk)("。")],-1),Ft=(0,e.Uk)("esint: "),Jt={href:"http://eslint.org/docs/rules/no-self-compare",target:"_blank",rel:"noopener noreferrer"},St=(0,e._)("code",null,"no-self-compare",-1),Nt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">===</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Dt=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用逗号操作符"),(0,e.Uk)("。")],-1),Ot=(0,e.Uk)("eslint: "),At={href:"http://eslint.org/docs/rules/no-sequences",target:"_blank",rel:"noopener noreferrer"},Ht=(0,e._)("code",null,"no-sequences",-1),Ct=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Rt=(0,e._)("p",null,[(0,e._)("strong",null,"不要随意更改关键字的值"),(0,e.Uk)("。")],-1),Tt=(0,e.Uk)("eslint: "),zt={href:"http://eslint.org/docs/rules/no-shadow-restricted-names",target:"_blank",rel:"noopener noreferrer"},$t=(0,e._)("code",null,"no-shadow-restricted-names",-1),It=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Mt=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用稀疏数组（Sparse arrays）"),(0,e.Uk)("。")],-1),Pt=(0,e.Uk)("eslint: "),Bt={href:"http://eslint.org/docs/rules/no-sparse-arrays",target:"_blank",rel:"noopener noreferrer"},Lt=(0,e._)("code",null,"no-sparse-arrays",-1),Vt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Yt=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用制表符"),(0,e.Uk)("。")],-1),Gt=(0,e.Uk)("eslint: "),Kt={href:"http://eslint.org/docs/rules/no-tabs",target:"_blank",rel:"noopener noreferrer"},Qt=(0,e._)("code",null,"no-tabs",-1),Xt=(0,e._)("p",null,[(0,e._)("strong",null,"正确使用 ES6 中的字符串模板"),(0,e.Uk)("。")],-1),Zt=(0,e.Uk)("eslint: "),no={href:"http://eslint.org/docs/rules/no-template-curly-in-string",target:"_blank",rel:"noopener noreferrer"},so=(0,e._)("code",null,"no-template-curly-in-string",-1),ao=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello ${name}&#39;</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),eo=(0,e._)("p",null,[(0,e._)("strong",null,"使用 this 前请确保 super() 已调用"),(0,e.Uk)("。")],-1),po=(0,e.Uk)("eslint: "),lo={href:"http://eslint.org/docs/rules/no-this-before-super",target:"_blank",rel:"noopener noreferrer"},to=(0,e._)("code",null,"no-this-before-super",-1),oo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">4</span>     <span class="token comment">// ✗ avoid</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',1),co=(0,e._)("p",null,[(0,e._)("strong",null,"用 throw 抛错时，抛出 Error 对象而不是字符串"),(0,e.Uk)("。")],-1),ro=(0,e.Uk)("eslint: "),uo={href:"http://eslint.org/docs/rules/no-throw-literal",target:"_blank",rel:"noopener noreferrer"},io=(0,e._)("code",null,"no-throw-literal",-1),ko=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">throw</span> <span class="token string">&#39;error&#39;</span>               <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),mo=(0,e._)("p",null,[(0,e._)("strong",null,"行末不留空格"),(0,e.Uk)("。")],-1),bo=(0,e.Uk)("eslint: "),go={href:"http://eslint.org/docs/rules/no-trailing-spaces",target:"_blank",rel:"noopener noreferrer"},vo=(0,e._)("code",null,"no-trailing-spaces",-1),_o=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用 undefined 来初始化变量"),(0,e.Uk)("。")],-1),fo=(0,e.Uk)("eslint: "),jo={href:"http://eslint.org/docs/rules/no-undef-init",target:"_blank",rel:"noopener noreferrer"},ho=(0,e._)("code",null,"no-undef-init",-1),wo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">let</span> name\nname <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>          <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),yo=(0,e._)("p",null,[(0,e._)("strong",null,"循环语句中注意更新循环变量"),(0,e.Uk)("。")],-1),Uo=(0,e.Uk)("eslint: "),xo={href:"http://eslint.org/docs/rules/no-unmodified-loop-condition",target:"_blank",rel:"noopener noreferrer"},Eo=(0,e._)("code",null,"no-unmodified-loop-condition",-1),Wo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),qo=(0,e._)("p",null,[(0,e._)("strong",null,"如果有更好的实现，尽量不要使用三元表达式"),(0,e.Uk)("。")],-1),Fo=(0,e.Uk)("eslint: "),Jo={href:"http://eslint.org/docs/rules/no-unneeded-ternary",target:"_blank",rel:"noopener noreferrer"},So=(0,e._)("code",null,"no-unneeded-ternary",-1),No=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> score <span class="token operator">=</span> val <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token number">0</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">let</span> score <span class="token operator">=</span> val <span class="token operator">||</span> <span class="token number">0</span>          <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Do=(0,e._)("p",null,[(0,e._)("strong",null,"return，throw，continue 和 break 后不要再跟代码"),(0,e.Uk)("。")],-1),Oo=(0,e.Uk)("eslint: "),Ao={href:"http://eslint.org/docs/rules/no-unreachable",target:"_blank",rel:"noopener noreferrer"},Ho=(0,e._)("code",null,"no-unreachable",-1),Co=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;never called&#39;</span><span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Ro=(0,e._)("p",null,[(0,e._)("strong",null,"finally 代码块中不要再改变程序执行流程"),(0,e.Uk)("。")],-1),To=(0,e.Uk)("eslint: "),zo={href:"http://eslint.org/docs/rules/no-unsafe-finally",target:"_blank",rel:"noopener noreferrer"},$o=(0,e._)("code",null,"no-unsafe-finally",-1),Io=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">42</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Mo=(0,e._)("p",null,[(0,e._)("strong",null,"关系运算符的左值不要做取反操作"),(0,e.Uk)("。")],-1),Po=(0,e.Uk)("eslint: "),Bo={href:"http://eslint.org/docs/rules/no-unsafe-negation",target:"_blank",rel:"noopener noreferrer"},Lo=(0,e._)("code",null,"no-unsafe-negation",-1),Vo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Yo=(0,e._)("p",null,[(0,e._)("strong",null,"避免不必要的 .call() 和 .apply()"),(0,e.Uk)("。")],-1),Go=(0,e.Uk)("eslint: "),Ko={href:"http://eslint.org/docs/rules/no-useless-call",target:"_blank",rel:"noopener noreferrer"},Qo=(0,e._)("code",null,"no-useless-call",-1),Xo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Zo=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用不必要的计算值作对象属性"),(0,e.Uk)("。")],-1),nc=(0,e.Uk)("eslint: "),sc={href:"http://eslint.org/docs/rules/no-useless-computed-key",target:"_blank",rel:"noopener noreferrer"},ac=(0,e._)("code",null,"no-useless-computed-key",-1),ec=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),pc=(0,e._)("p",null,[(0,e._)("strong",null,"禁止多余的构造器"),(0,e.Uk)("。")],-1),lc=(0,e.Uk)("eslint: "),tc={href:"http://eslint.org/docs/rules/no-useless-constructor",target:"_blank",rel:"noopener noreferrer"},oc=(0,e._)("code",null,"no-useless-constructor",-1),cc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),rc=(0,e._)("p",null,[(0,e._)("strong",null,"禁止不必要的转义"),(0,e.Uk)("。")],-1),uc=(0,e.Uk)("eslint: "),ic={href:"http://eslint.org/docs/rules/no-useless-escape",target:"_blank",rel:"noopener noreferrer"},kc=(0,e._)("code",null,"no-useless-escape",-1),mc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Hell\\o&#39;</span>  <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),dc=(0,e._)("p",null,[(0,e._)("strong",null,"import, export 和解构操作中，禁止赋值到同名变量"),(0,e.Uk)("。")],-1),bc=(0,e.Uk)("eslint: "),gc={href:"http://eslint.org/docs/rules/no-useless-rename",target:"_blank",rel:"noopener noreferrer"},vc=(0,e._)("code",null,"no-useless-rename",-1),_c=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token keyword">as</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./config&#39;</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./config&#39;</span>               <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),fc=(0,e._)("p",null,[(0,e._)("strong",null,"属性前面不要加空格"),(0,e.Uk)("。")],-1),jc=(0,e.Uk)("eslint: "),hc={href:"http://eslint.org/docs/rules/no-whitespace-before-property",target:"_blank",rel:"noopener noreferrer"},wc=(0,e._)("code",null,"no-whitespace-before-property",-1),yc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>user <span class="token punctuation">.</span>name      <span class="token comment">// ✗ avoid</span>\nuser<span class="token punctuation">.</span>name       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Uc=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 with"),(0,e.Uk)("。")],-1),xc=(0,e.Uk)("eslint: "),Ec={href:"http://eslint.org/docs/rules/no-with",target:"_blank",rel:"noopener noreferrer"},Wc=(0,e._)("code",null,"no-with",-1),qc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Fc=(0,e._)("p",null,[(0,e._)("strong",null,"对象属性换行时注意统一代码风格"),(0,e.Uk)("。")],-1),Jc=(0,e.Uk)("eslint: "),Sc={href:"http://eslint.org/docs/rules/object-property-newline",target:"_blank",rel:"noopener noreferrer"},Nc=(0,e._)("code",null,"object-property-newline",-1),Dc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span>            <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> username<span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span> <span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span>\n<span class="token punctuation">}</span>                                                                 <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),Oc=(0,e._)("p",null,[(0,e._)("strong",null,"代码块中避免多余留白"),(0,e.Uk)("。")],-1),Ac=(0,e.Uk)("eslint: "),Hc={href:"http://eslint.org/docs/rules/padded-blocks",target:"_blank",rel:"noopener noreferrer"},Cc=(0,e._)("code",null,"padded-blocks",-1),Rc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),Tc=(0,e._)("p",null,[(0,e._)("strong",null,"展开运算符与它的表达式间不要留空白"),(0,e.Uk)("。")],-1),zc=(0,e.Uk)("eslint: "),$c={href:"http://eslint.org/docs/rules/rest-spread-spacing",target:"_blank",rel:"noopener noreferrer"},Ic=(0,e._)("code",null,"rest-spread-spacing",-1),Mc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span> args<span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Pc=(0,e._)("p",null,[(0,e._)("strong",null,"遇到分号时空格要后留前不留"),(0,e.Uk)("。")],-1),Bc=(0,e.Uk)("eslint: "),Lc={href:"http://eslint.org/docs/rules/semi-spacing",target:"_blank",rel:"noopener noreferrer"},Vc=(0,e._)("code",null,"semi-spacing",-1),Yc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Gc=(0,e._)("p",null,[(0,e._)("strong",null,"代码块首尾留空格"),(0,e.Uk)("。")],-1),Kc=(0,e.Uk)("eslint: "),Qc={href:"http://eslint.org/docs/rules/space-before-blocks",target:"_blank",rel:"noopener noreferrer"},Xc=(0,e._)("code",null,"space-before-blocks",-1),Zc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),nr=(0,e._)("p",null,[(0,e._)("strong",null,"圆括号间不留空格"),(0,e.Uk)("。")],-1),sr=(0,e.Uk)("eslint: "),ar={href:"http://eslint.org/docs/rules/space-in-parens",target:"_blank",rel:"noopener noreferrer"},er=(0,e._)("code",null,"space-in-parens",-1),pr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getName</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token function">getName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),lr=(0,e._)("p",null,[(0,e._)("strong",null,"一元运算符后面跟一个空格"),(0,e.Uk)("。")],-1),tr=(0,e.Uk)("eslint: "),or={href:"http://eslint.org/docs/rules/space-unary-ops",target:"_blank",rel:"noopener noreferrer"},cr=(0,e._)("code",null,"space-unary-ops",-1),rr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span><span class="token operator">!</span>admin        <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">typeof</span> <span class="token operator">!</span>admin        <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ur=(0,e._)("p",null,[(0,e._)("strong",null,"注释首尾留空格"),(0,e.Uk)("。")],-1),ir=(0,e.Uk)("eslint: "),kr={href:"http://eslint.org/docs/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"},mr=(0,e._)("code",null,"spaced-comment",-1),dr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//comment           // ✗ avoid</span>\n<span class="token comment">// comment          // ✓ ok</span>\n\n<span class="token comment">/*comment*/</span>         <span class="token comment">// ✗ avoid</span>\n<span class="token comment">/* comment */</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),br=(0,e._)("p",null,[(0,e._)("strong",null,"模板字符串中变量前后不加空格"),(0,e.Uk)("。")],-1),gr=(0,e.Uk)("eslint: "),vr={href:"http://eslint.org/docs/rules/template-curly-spacing",target:"_blank",rel:"noopener noreferrer"},_r=(0,e._)("code",null,"template-curly-spacing",-1),fr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>      <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),jr=(0,e._)("p",null,[(0,e._)("strong",null,"检查 NaN 的正确姿势是使用 isNaN()"),(0,e.Uk)("。")],-1),hr=(0,e.Uk)("eslint: "),wr={href:"http://eslint.org/docs/rules/use-isnan",target:"_blank",rel:"noopener noreferrer"},yr=(0,e._)("code",null,"use-isnan",-1),Ur=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),xr=(0,e._)("p",null,[(0,e._)("strong",null,"用合法的字符串跟 typeof 进行比较操作"),(0,e.Uk)("。")],-1),Er=(0,e.Uk)("eslint: "),Wr={href:"http://eslint.org/docs/rules/valid-typeof",target:"_blank",rel:"noopener noreferrer"},qr=(0,e._)("code",null,"valid-typeof",-1),Fr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefimed&#39;</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Jr=(0,e._)("p",null,[(0,e._)("strong",null,"自调用匿名函数 (IIFEs) 使用括号包裹"),(0,e.Uk)("。")],-1),Sr=(0,e.Uk)("eslint: "),Nr={href:"http://eslint.org/docs/rules/wrap-iife",target:"_blank",rel:"noopener noreferrer"},Dr=(0,e._)("code",null,"wrap-iife",-1),Or=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">const</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">const</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Ar=(0,e._)("p",null,[(0,e._)("strong",null,"yield * 中的 * 前后都要有空格"),(0,e.Uk)("。")],-1),Hr=(0,e.Uk)("eslint: "),Cr={href:"http://eslint.org/docs/rules/yield-star-spacing",target:"_blank",rel:"noopener noreferrer"},Rr=(0,e._)("code",null,"yield-star-spacing",-1),Tr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">yield</span> <span class="token operator">*</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),zr=(0,e._)("p",null,[(0,e._)("strong",null,"请书写优雅的条件语句（avoid Yoda conditions）"),(0,e.Uk)("。")],-1),$r=(0,e.Uk)("eslint: "),Ir={href:"http://eslint.org/docs/rules/yoda",target:"_blank",rel:"noopener noreferrer"},Mr=(0,e._)("code",null,"yoda",-1),Pr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">===</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Br=(0,e._)("h2",{id:"关于分号",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#关于分号","aria-hidden":"true"},"#"),(0,e.Uk)(" 关于分号")],-1),Lr=(0,e.Uk)("不要使用分号。 (参见："),Vr={href:"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding",target:"_blank",rel:"noopener noreferrer"},Yr=(0,e.Uk)("1"),Gr=(0,e.Uk)("，"),Kr={href:"http://inimino.org/~inimino/blog/javascript_semicolons",target:"_blank",rel:"noopener noreferrer"},Qr=(0,e.Uk)("2"),Xr=(0,e.Uk)("，"),Zr={href:"https://www.youtube.com/watch?v=gsfbh17Ax9I",target:"_blank",rel:"noopener noreferrer"},nu=(0,e.Uk)("3"),su=(0,e.Uk)(")"),au=(0,e.Uk)("eslint: "),eu={href:"http://eslint.org/docs/rules/semi",target:"_blank",rel:"noopener noreferrer"},pu=(0,e._)("code",null,"semi",-1),lu=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\nwindow<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),tu=(0,e._)("p",null,[(0,e.Uk)("不要使用 "),(0,e._)("code",null,"("),(0,e.Uk)(", "),(0,e._)("code",null,"["),(0,e.Uk)(", or ``` 等作为一行的开始。在没有分号的情况下代码压缩后会导致报错，而坚持这一规范则可避免出错。")],-1),ou=(0,e.Uk)("eslint: "),cu={href:"http://eslint.org/docs/rules/no-unexpected-multiline",target:"_blank",rel:"noopener noreferrer"},ru=(0,e._)("code",null,"no-unexpected-multiline",-1),uu=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token punctuation">;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>备注：上面的写法只能说聪明过头了。</p><p>相比更加可读易懂的代码，那些看似投巧的写法是不可取的。</p><p>譬如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>建议的写法是：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\nnums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',9),iu={render:function(n,s){const a=(0,e.up)("RouterLink"),iu=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[l,t,o,c,r,(0,e.Wm)(a,{to:"/frontend/standard/editor.html"},{default:(0,e.w5)((()=>[u])),_:1})]),i,(0,e._)("ul",null,[(0,e._)("li",null,[k,(0,e._)("p",null,[m,(0,e._)("a",d,[b,(0,e.Wm)(iu)])]),g]),(0,e._)("li",null,[v,(0,e._)("p",null,[_,(0,e._)("a",f,[j,(0,e.Wm)(iu)])]),h]),(0,e._)("li",null,[w,(0,e._)("p",null,[y,(0,e._)("a",U,[x,(0,e.Wm)(iu)])]),E]),(0,e._)("li",null,[W,(0,e._)("p",null,[q,(0,e._)("a",F,[J,(0,e.Wm)(iu)])]),S]),(0,e._)("li",null,[N,(0,e._)("p",null,[D,(0,e._)("a",O,[A,(0,e.Wm)(iu)])]),H]),(0,e._)("li",null,[C,(0,e._)("p",null,[R,(0,e._)("a",T,[z,(0,e.Wm)(iu)])]),$]),(0,e._)("li",null,[I,(0,e._)("p",null,[M,(0,e._)("a",P,[B,(0,e.Wm)(iu)])]),L]),(0,e._)("li",null,[V,(0,e._)("p",null,[Y,(0,e._)("a",G,[K,(0,e.Wm)(iu)])]),Q]),(0,e._)("li",null,[X,(0,e._)("p",null,[Z,(0,e._)("a",nn,[sn,(0,e.Wm)(iu)])]),an]),(0,e._)("li",null,[en,(0,e._)("p",null,[pn,(0,e._)("a",ln,[tn,(0,e.Wm)(iu)])]),on]),(0,e._)("li",null,[cn,(0,e._)("p",null,[rn,(0,e._)("a",un,[kn,(0,e.Wm)(iu)])]),mn]),(0,e._)("li",null,[dn,(0,e._)("p",null,[bn,(0,e._)("a",gn,[vn,(0,e.Wm)(iu)])]),_n]),(0,e._)("li",null,[fn,(0,e._)("p",null,[jn,(0,e._)("a",hn,[wn,(0,e.Wm)(iu)])]),yn]),(0,e._)("li",null,[Un,(0,e._)("p",null,[xn,(0,e._)("a",En,[Wn,(0,e.Wm)(iu)])]),qn]),(0,e._)("li",null,[Fn,(0,e._)("p",null,[Jn,(0,e._)("a",Sn,[Nn,(0,e.Wm)(iu)])]),Dn]),(0,e._)("li",null,[On,(0,e._)("p",null,[An,(0,e._)("a",Hn,[Cn,(0,e.Wm)(iu)])]),Rn]),(0,e._)("li",null,[Tn,(0,e._)("p",null,[zn,(0,e._)("a",$n,[In,(0,e.Wm)(iu)])]),Mn]),(0,e._)("li",null,[Pn,(0,e._)("p",null,[Bn,(0,e._)("a",Ln,[Vn,(0,e.Wm)(iu)])]),Yn]),(0,e._)("li",null,[Gn,(0,e._)("p",null,[Kn,(0,e._)("a",Qn,[Xn,(0,e.Wm)(iu)])]),Zn]),(0,e._)("li",null,[ns,(0,e._)("p",null,[ss,(0,e._)("a",as,[es,(0,e.Wm)(iu)])]),ps]),(0,e._)("li",null,[ls,(0,e._)("p",null,[ts,(0,e._)("a",os,[cs,(0,e.Wm)(iu)])]),rs]),(0,e._)("li",null,[us,(0,e._)("p",null,[is,(0,e._)("a",ks,[ms,(0,e.Wm)(iu)])])]),(0,e._)("li",null,[ds,(0,e._)("p",null,[bs,(0,e._)("a",gs,[vs,(0,e.Wm)(iu)])]),_s]),(0,e._)("li",null,[fs,(0,e._)("p",null,[js,(0,e._)("a",hs,[ws,(0,e.Wm)(iu)])]),ys]),(0,e._)("li",null,[Us,(0,e._)("p",null,[xs,(0,e._)("a",Es,[Ws,(0,e.Wm)(iu)])]),qs]),(0,e._)("li",null,[Fs,(0,e._)("p",null,[Js,(0,e._)("a",Ss,[Ns,(0,e.Wm)(iu)])]),Ds]),(0,e._)("li",null,[Os,(0,e._)("p",null,[As,(0,e._)("a",Hs,[Cs,(0,e.Wm)(iu)])]),Rs]),(0,e._)("li",null,[Ts,(0,e._)("p",null,[zs,(0,e._)("a",$s,[Is,(0,e.Wm)(iu)])]),Ms]),(0,e._)("li",null,[Ps,(0,e._)("p",null,[Bs,(0,e._)("a",Ls,[Vs,(0,e.Wm)(iu)])]),Ys]),(0,e._)("li",null,[Gs,(0,e._)("p",null,[Ks,(0,e._)("a",Qs,[Xs,(0,e.Wm)(iu)])]),Zs]),(0,e._)("li",null,[na,(0,e._)("p",null,[sa,(0,e._)("a",aa,[ea,(0,e.Wm)(iu)])]),pa]),(0,e._)("li",null,[la,(0,e._)("p",null,[ta,(0,e._)("a",oa,[ca,(0,e.Wm)(iu)])]),ra]),(0,e._)("li",null,[ua,(0,e._)("p",null,[ia,(0,e._)("a",ka,[ma,(0,e.Wm)(iu)])]),da]),(0,e._)("li",null,[ba,(0,e._)("p",null,[ga,(0,e._)("a",va,[_a,(0,e.Wm)(iu)])]),fa]),(0,e._)("li",null,[ja,(0,e._)("p",null,[ha,(0,e._)("a",wa,[ya,(0,e.Wm)(iu)])]),Ua]),(0,e._)("li",null,[xa,(0,e._)("p",null,[Ea,(0,e._)("a",Wa,[qa,(0,e.Wm)(iu)])]),Fa]),(0,e._)("li",null,[Ja,(0,e._)("p",null,[Sa,(0,e._)("a",Na,[Da,(0,e.Wm)(iu)])]),Oa]),(0,e._)("li",null,[Aa,(0,e._)("p",null,[Ha,(0,e._)("a",Ca,[Ra,(0,e.Wm)(iu)])]),Ta]),(0,e._)("li",null,[za,(0,e._)("p",null,[$a,(0,e._)("a",Ia,[Ma,(0,e.Wm)(iu)])]),Pa]),(0,e._)("li",null,[Ba,(0,e._)("p",null,[La,(0,e._)("a",Va,[Ya,(0,e.Wm)(iu)])]),Ga]),(0,e._)("li",null,[Ka,(0,e._)("p",null,[Qa,(0,e._)("a",Xa,[Za,(0,e.Wm)(iu)])]),ne]),(0,e._)("li",null,[se,(0,e._)("p",null,[ae,(0,e._)("a",ee,[pe,(0,e.Wm)(iu)])]),le]),(0,e._)("li",null,[te,(0,e._)("p",null,[oe,(0,e._)("a",ce,[re,(0,e.Wm)(iu)])]),ue]),(0,e._)("li",null,[ie,(0,e._)("p",null,[ke,(0,e._)("a",me,[de,(0,e.Wm)(iu)])]),be]),(0,e._)("li",null,[ge,(0,e._)("p",null,[ve,(0,e._)("a",_e,[fe,(0,e.Wm)(iu)])]),je]),(0,e._)("li",null,[he,(0,e._)("p",null,[we,(0,e._)("a",ye,[Ue,(0,e.Wm)(iu)])]),xe]),(0,e._)("li",null,[Ee,(0,e._)("p",null,[We,(0,e._)("a",qe,[Fe,(0,e.Wm)(iu)])]),Je]),(0,e._)("li",null,[Se,(0,e._)("p",null,[Ne,(0,e._)("a",De,[Oe,(0,e.Wm)(iu)])]),Ae]),(0,e._)("li",null,[He,(0,e._)("p",null,[Ce,(0,e._)("a",Re,[Te,(0,e.Wm)(iu)])]),ze]),(0,e._)("li",null,[$e,(0,e._)("p",null,[Ie,(0,e._)("a",Me,[Pe,(0,e.Wm)(iu)])]),Be]),(0,e._)("li",null,[Le,(0,e._)("p",null,[Ve,(0,e._)("a",Ye,[Ge,(0,e.Wm)(iu)])]),Ke]),(0,e._)("li",null,[Qe,(0,e._)("p",null,[Xe,(0,e._)("a",Ze,[np,(0,e.Wm)(iu)])]),sp]),(0,e._)("li",null,[ap,(0,e._)("p",null,[ep,(0,e._)("a",pp,[lp,(0,e.Wm)(iu)])]),tp]),(0,e._)("li",null,[op,(0,e._)("p",null,[cp,(0,e._)("a",rp,[up,(0,e.Wm)(iu)])]),ip]),(0,e._)("li",null,[kp,(0,e._)("p",null,[mp,(0,e._)("a",dp,[bp,(0,e.Wm)(iu)])]),gp]),(0,e._)("li",null,[vp,(0,e._)("p",null,[_p,(0,e._)("a",fp,[jp,(0,e.Wm)(iu)])]),hp]),(0,e._)("li",null,[wp,(0,e._)("p",null,[yp,(0,e._)("a",Up,[xp,(0,e.Wm)(iu)])]),Ep]),(0,e._)("li",null,[Wp,(0,e._)("p",null,[qp,(0,e._)("a",Fp,[Jp,(0,e.Wm)(iu)])]),Sp]),(0,e._)("li",null,[Np,(0,e._)("p",null,[Dp,(0,e._)("a",Op,[Ap,(0,e.Wm)(iu)])]),Hp]),(0,e._)("li",null,[Cp,(0,e._)("p",null,[Rp,(0,e._)("a",Tp,[zp,(0,e.Wm)(iu)])]),$p]),(0,e._)("li",null,[Ip,(0,e._)("p",null,[Mp,(0,e._)("a",Pp,[Bp,(0,e.Wm)(iu)])]),Lp]),(0,e._)("li",null,[Vp,(0,e._)("p",null,[Yp,(0,e._)("a",Gp,[Kp,(0,e.Wm)(iu)])])]),(0,e._)("li",null,[Qp,(0,e._)("p",null,[Xp,(0,e._)("a",Zp,[nl,(0,e.Wm)(iu)])]),sl]),(0,e._)("li",null,[al,(0,e._)("p",null,[el,(0,e._)("a",pl,[ll,(0,e.Wm)(iu)])]),tl]),(0,e._)("li",null,[ol,(0,e._)("p",null,[cl,(0,e._)("a",rl,[ul,(0,e.Wm)(iu)])]),il]),(0,e._)("li",null,[kl,(0,e._)("p",null,[ml,(0,e._)("a",dl,[bl,(0,e.Wm)(iu)])]),gl]),(0,e._)("li",null,[vl,(0,e._)("p",null,[_l,(0,e._)("a",fl,[jl,(0,e.Wm)(iu)])]),hl]),(0,e._)("li",null,[wl,(0,e._)("p",null,[yl,(0,e._)("a",Ul,[xl,(0,e.Wm)(iu)])]),El]),(0,e._)("li",null,[Wl,(0,e._)("p",null,[ql,(0,e._)("a",Fl,[Jl,(0,e.Wm)(iu)])]),Sl]),(0,e._)("li",null,[Nl,(0,e._)("p",null,[Dl,(0,e._)("a",Ol,[Al,(0,e.Wm)(iu)])]),Hl]),(0,e._)("li",null,[Cl,(0,e._)("p",null,[Rl,(0,e._)("a",Tl,[zl,(0,e.Wm)(iu)])]),$l]),(0,e._)("li",null,[Il,(0,e._)("p",null,[Ml,(0,e._)("a",Pl,[Bl,(0,e.Wm)(iu)])]),Ll]),(0,e._)("li",null,[Vl,(0,e._)("p",null,[Yl,(0,e._)("a",Gl,[Kl,(0,e.Wm)(iu)])]),Ql]),(0,e._)("li",null,[Xl,(0,e._)("p",null,[Zl,(0,e._)("a",nt,[st,(0,e.Wm)(iu)])]),at]),(0,e._)("li",null,[et,(0,e._)("p",null,[pt,(0,e._)("a",lt,[tt,(0,e.Wm)(iu)])]),ot]),(0,e._)("li",null,[ct,(0,e._)("p",null,[rt,(0,e._)("a",ut,[it,(0,e.Wm)(iu)])]),kt]),(0,e._)("li",null,[mt,(0,e._)("p",null,[dt,(0,e._)("a",bt,[gt,(0,e.Wm)(iu)])]),vt]),(0,e._)("li",null,[_t,(0,e._)("p",null,[ft,(0,e._)("a",jt,[ht,(0,e.Wm)(iu)])]),wt]),(0,e._)("li",null,[yt,(0,e._)("p",null,[Ut,(0,e._)("a",xt,[Et,(0,e.Wm)(iu)])]),Wt]),(0,e._)("li",null,[qt,(0,e._)("p",null,[Ft,(0,e._)("a",Jt,[St,(0,e.Wm)(iu)])]),Nt]),(0,e._)("li",null,[Dt,(0,e._)("p",null,[Ot,(0,e._)("a",At,[Ht,(0,e.Wm)(iu)])]),Ct]),(0,e._)("li",null,[Rt,(0,e._)("p",null,[Tt,(0,e._)("a",zt,[$t,(0,e.Wm)(iu)])]),It]),(0,e._)("li",null,[Mt,(0,e._)("p",null,[Pt,(0,e._)("a",Bt,[Lt,(0,e.Wm)(iu)])]),Vt]),(0,e._)("li",null,[Yt,(0,e._)("p",null,[Gt,(0,e._)("a",Kt,[Qt,(0,e.Wm)(iu)])])]),(0,e._)("li",null,[Xt,(0,e._)("p",null,[Zt,(0,e._)("a",no,[so,(0,e.Wm)(iu)])]),ao]),(0,e._)("li",null,[eo,(0,e._)("p",null,[po,(0,e._)("a",lo,[to,(0,e.Wm)(iu)])]),oo]),(0,e._)("li",null,[co,(0,e._)("p",null,[ro,(0,e._)("a",uo,[io,(0,e.Wm)(iu)])]),ko]),(0,e._)("li",null,[mo,(0,e._)("p",null,[bo,(0,e._)("a",go,[vo,(0,e.Wm)(iu)])])]),(0,e._)("li",null,[_o,(0,e._)("p",null,[fo,(0,e._)("a",jo,[ho,(0,e.Wm)(iu)])]),wo]),(0,e._)("li",null,[yo,(0,e._)("p",null,[Uo,(0,e._)("a",xo,[Eo,(0,e.Wm)(iu)])]),Wo]),(0,e._)("li",null,[qo,(0,e._)("p",null,[Fo,(0,e._)("a",Jo,[So,(0,e.Wm)(iu)])]),No]),(0,e._)("li",null,[Do,(0,e._)("p",null,[Oo,(0,e._)("a",Ao,[Ho,(0,e.Wm)(iu)])]),Co]),(0,e._)("li",null,[Ro,(0,e._)("p",null,[To,(0,e._)("a",zo,[$o,(0,e.Wm)(iu)])]),Io]),(0,e._)("li",null,[Mo,(0,e._)("p",null,[Po,(0,e._)("a",Bo,[Lo,(0,e.Wm)(iu)])]),Vo]),(0,e._)("li",null,[Yo,(0,e._)("p",null,[Go,(0,e._)("a",Ko,[Qo,(0,e.Wm)(iu)])]),Xo]),(0,e._)("li",null,[Zo,(0,e._)("p",null,[nc,(0,e._)("a",sc,[ac,(0,e.Wm)(iu)])]),ec]),(0,e._)("li",null,[pc,(0,e._)("p",null,[lc,(0,e._)("a",tc,[oc,(0,e.Wm)(iu)])]),cc]),(0,e._)("li",null,[rc,(0,e._)("p",null,[uc,(0,e._)("a",ic,[kc,(0,e.Wm)(iu)])]),mc]),(0,e._)("li",null,[dc,(0,e._)("p",null,[bc,(0,e._)("a",gc,[vc,(0,e.Wm)(iu)])]),_c]),(0,e._)("li",null,[fc,(0,e._)("p",null,[jc,(0,e._)("a",hc,[wc,(0,e.Wm)(iu)])]),yc]),(0,e._)("li",null,[Uc,(0,e._)("p",null,[xc,(0,e._)("a",Ec,[Wc,(0,e.Wm)(iu)])]),qc]),(0,e._)("li",null,[Fc,(0,e._)("p",null,[Jc,(0,e._)("a",Sc,[Nc,(0,e.Wm)(iu)])]),Dc]),(0,e._)("li",null,[Oc,(0,e._)("p",null,[Ac,(0,e._)("a",Hc,[Cc,(0,e.Wm)(iu)])]),Rc]),(0,e._)("li",null,[Tc,(0,e._)("p",null,[zc,(0,e._)("a",$c,[Ic,(0,e.Wm)(iu)])]),Mc]),(0,e._)("li",null,[Pc,(0,e._)("p",null,[Bc,(0,e._)("a",Lc,[Vc,(0,e.Wm)(iu)])]),Yc]),(0,e._)("li",null,[Gc,(0,e._)("p",null,[Kc,(0,e._)("a",Qc,[Xc,(0,e.Wm)(iu)])]),Zc]),(0,e._)("li",null,[nr,(0,e._)("p",null,[sr,(0,e._)("a",ar,[er,(0,e.Wm)(iu)])]),pr]),(0,e._)("li",null,[lr,(0,e._)("p",null,[tr,(0,e._)("a",or,[cr,(0,e.Wm)(iu)])]),rr]),(0,e._)("li",null,[ur,(0,e._)("p",null,[ir,(0,e._)("a",kr,[mr,(0,e.Wm)(iu)])]),dr]),(0,e._)("li",null,[br,(0,e._)("p",null,[gr,(0,e._)("a",vr,[_r,(0,e.Wm)(iu)])]),fr]),(0,e._)("li",null,[jr,(0,e._)("p",null,[hr,(0,e._)("a",wr,[yr,(0,e.Wm)(iu)])]),Ur]),(0,e._)("li",null,[xr,(0,e._)("p",null,[Er,(0,e._)("a",Wr,[qr,(0,e.Wm)(iu)])]),Fr]),(0,e._)("li",null,[Jr,(0,e._)("p",null,[Sr,(0,e._)("a",Nr,[Dr,(0,e.Wm)(iu)])]),Or]),(0,e._)("li",null,[Ar,(0,e._)("p",null,[Hr,(0,e._)("a",Cr,[Rr,(0,e.Wm)(iu)])]),Tr]),(0,e._)("li",null,[zr,(0,e._)("p",null,[$r,(0,e._)("a",Ir,[Mr,(0,e.Wm)(iu)])]),Pr])]),Br,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[Lr,(0,e._)("a",Vr,[Yr,(0,e.Wm)(iu)]),Gr,(0,e._)("a",Kr,[Qr,(0,e.Wm)(iu)]),Xr,(0,e._)("a",Zr,[nu,(0,e.Wm)(iu)]),su]),(0,e._)("p",null,[au,(0,e._)("a",eu,[pu,(0,e.Wm)(iu)])]),lu]),(0,e._)("li",null,[tu,(0,e._)("p",null,[ou,(0,e._)("a",cu,[ru,(0,e.Wm)(iu)])]),uu])])],64)}}}}]);