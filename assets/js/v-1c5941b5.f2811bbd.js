"use strict";(self.webpackChunkfrontdocs=self.webpackChunkfrontdocs||[]).push([[792],{1634:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-1c5941b5",path:"/baselang/javascript.html",title:"JavaScript 规范",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前言",slug:"前言",children:[]},{level:2,title:"代码文件",slug:"代码文件",children:[]},{level:2,title:"细则",slug:"细则",children:[]},{level:2,title:"关于分号",slug:"关于分号",children:[]}],filePathRelative:"baselang/javascript.md",git:{updatedTime:162997515e4,contributors:[]}}},6005:(n,s,a)=>{a.r(s),a.d(s,{default:()=>ku});var e=a(6252);const p=(0,e.uE)('<h1 id="javascript-规范" tabindex="-1"><a class="header-anchor" href="#javascript-规范" aria-hidden="true">#</a> JavaScript 规范</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>JavaScript 在前端一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使 JavaScript 代码风格保持一致，容易被理解和被维护。</p><p>虽然本文档是针对 JavaScript 设计的，但是在使用各种 JavaScript 的预编译语言时(如 TypeScript 等)时，适用的部分也应尽量遵循本文档的约定。</p><h2 id="代码文件" tabindex="-1"><a class="header-anchor" href="#代码文件" aria-hidden="true">#</a> 代码文件</h2><ul><li>JavaScript 文件使用无<code>BOM</code>的<code>UTF-8</code>编码</li><li>在文件结尾处，保留一个空行</li></ul>',6),l=(0,e.Uk)("更加详细的"),t=(0,e._)("strong",null,"编辑器",-1),o=(0,e.Uk)("及"),c=(0,e._)("strong",null,"代码文件",-1),r=(0,e.Uk)("推荐"),u={href:"/frontend/standard/editor.html",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("传送门"),k=(0,e._)("h2",{id:"细则",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#细则","aria-hidden":"true"},"#"),(0,e.Uk)(" 细则")],-1),m=(0,e._)("p",null,[(0,e._)("strong",null,"使用两个空格"),(0,e.Uk)("进行缩进。")],-1),d=(0,e.Uk)("eslint: "),b={href:"http://eslint.org/docs/rules/indent",target:"_blank",rel:"noopener noreferrer"},g=(0,e._)("code",null,"indent",-1),v=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hello</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),_=(0,e._)("p",null,[(0,e.Uk)("除需要转义的情况外，"),(0,e._)("strong",null,"字符串统一使用单引号"),(0,e.Uk)("。")],-1),f=(0,e.Uk)("eslint: "),j={href:"http://eslint.org/docs/rules/quotes",target:"_blank",rel:"noopener noreferrer"},h=(0,e._)("code",null,"quotes",-1),w=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello there&#39;</span><span class="token punctuation">)</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;div class=&#39;box&#39;&gt;&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),y=(0,e._)("p",null,[(0,e._)("strong",null,"不要定义未使用的变量"),(0,e.Uk)("。")],-1),U=(0,e.Uk)("eslint: "),x={href:"http://eslint.org/docs/rules/no-unused-vars",target:"_blank",rel:"noopener noreferrer"},E=(0,e._)("code",null,"no-unused-vars",-1),W=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),F=(0,e._)("p",null,[(0,e._)("strong",null,"关键字后面加空格"),(0,e.Uk)("。")],-1),q=(0,e.Uk)("eslint: "),J={href:"http://eslint.org/docs/rules/keyword-spacing",target:"_blank",rel:"noopener noreferrer"},S=(0,e._)("code",null,"keyword-spacing",-1),N=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),D=(0,e._)("p",null,[(0,e._)("strong",null,"函数声明时括号与函数名间加空格"),(0,e.Uk)("。")],-1),O=(0,e.Uk)("eslint: "),A={href:"http://eslint.org/docs/rules/space-before-function-paren",target:"_blank",rel:"noopener noreferrer"},H=(0,e._)("code",null,"space-before-function-paren",-1),C=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment">// ✓ ok</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),T=(0,e._)("p",null,[(0,e._)("strong",null,"始终使用"),(0,e.Uk)(),(0,e._)("code",null,"==="),(0,e.Uk)(" 替代 "),(0,e._)("code",null,"=="),(0,e.Uk)("。 例外： "),(0,e._)("code",null,"obj == null"),(0,e.Uk)(" 可以用来检查 "),(0,e._)("code",null,"null || undefined"),(0,e.Uk)("。")],-1),R=(0,e.Uk)("eslint: "),z={href:"http://eslint.org/docs/rules/eqeqeq",target:"_blank",rel:"noopener noreferrer"},$=(0,e._)("code",null,"eqeqeq",-1),I=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),M=(0,e._)("p",null,[(0,e._)("strong",null,"字符串拼接操作符 (Infix operators)"),(0,e.Uk)(" 之间要留空格。")],-1),P=(0,e.Uk)("eslint: "),B={href:"http://eslint.org/docs/rules/space-infix-ops",target:"_blank",rel:"noopener noreferrer"},V=(0,e._)("code",null,"space-infix-ops",-1),Y=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">2</span>\n<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello, &#39;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&#39;!&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',2),L=(0,e._)("p",null,[(0,e._)("strong",null,"逗号后面加空格"),(0,e.Uk)("。")],-1),G=(0,e.Uk)("eslint: "),K={href:"http://eslint.org/docs/rules/comma-spacing",target:"_blank",rel:"noopener noreferrer"},Q=(0,e._)("code",null,"comma-spacing",-1),X=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">greet</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">greet</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',2),Z=(0,e._)("p",null,[(0,e._)("strong",null,"else 关键字要与花括号"),(0,e.Uk)("保持在同一行。")],-1),nn=(0,e.Uk)("eslint: "),sn={href:"http://eslint.org/docs/rules/brace-style",target:"_blank",rel:"noopener noreferrer"},an=(0,e._)("code",null,"brace-style",-1),en=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2),pn=(0,e._)("p",null,[(0,e._)("strong",null,"多行 if 语句的"),(0,e.Uk)("的括号不能省。")],-1),ln=(0,e.Uk)("eslint: "),tn={href:"http://eslint.org/docs/rules/curly",target:"_blank",rel:"noopener noreferrer"},on=(0,e._)("code",null,"curly",-1),cn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),rn=(0,e._)("p",null,[(0,e._)("strong",null,"不要丢掉"),(0,e.Uk)("异常处理中"),(0,e._)("code",null,"err"),(0,e.Uk)("参数。")],-1),un=(0,e.Uk)("eslint: "),kn={href:"http://eslint.org/docs/rules/handle-callback-err",target:"_blank",rel:"noopener noreferrer"},mn=(0,e._)("code",null,"handle-callback-err",-1),dn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),bn=(0,e._)("p",null,[(0,e._)("strong",null,"使用浏览器全局变量时加上"),(0,e.Uk)(),(0,e._)("code",null,"window."),(0,e.Uk)(" 前缀。 Exceptions are: "),(0,e._)("code",null,"document"),(0,e.Uk)(", "),(0,e._)("code",null,"console"),(0,e.Uk)(" and "),(0,e._)("code",null,"navigator"),(0,e.Uk)(".")],-1),gn=(0,e.Uk)("eslint: "),vn={href:"http://eslint.org/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"},_n=(0,e._)("code",null,"no-undef",-1),fn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),jn=(0,e._)("p",null,[(0,e._)("strong",null,"不允许有连续多行空行"),(0,e.Uk)("。")],-1),hn=(0,e.Uk)("eslint: "),wn={href:"http://eslint.org/docs/rules/no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"},yn=(0,e._)("code",null,"no-multiple-empty-lines",-1),Un=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>\n\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),xn=(0,e._)("p",null,[(0,e._)("strong",null,"对于三元运算符"),(0,e.Uk)(),(0,e._)("code",null,"?"),(0,e.Uk)(" 和 "),(0,e._)("code",null,":"),(0,e.Uk)(" 与他们所负责的代码处于同一行")],-1),En=(0,e.Uk)("eslint: "),Wn={href:"http://eslint.org/docs/rules/operator-linebreak",target:"_blank",rel:"noopener noreferrer"},Fn=(0,e._)("code",null,"operator-linebreak",-1),qn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development <span class="token operator">?</span> <span class="token string">&#39;localhost&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;www.api.com&#39;</span>\n\n<span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development\n  <span class="token operator">?</span> <span class="token string">&#39;localhost&#39;</span>\n  <span class="token operator">:</span> <span class="token string">&#39;www.api.com&#39;</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development <span class="token operator">?</span>\n  <span class="token string">&#39;localhost&#39;</span> <span class="token operator">:</span>\n  <span class="token string">&#39;www.api.com&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),Jn=(0,e._)("p",null,[(0,e._)("strong",null,"每个 var 关键字"),(0,e.Uk)("单独声明一个变量。")],-1),Sn=(0,e.Uk)("eslint: "),Nn={href:"http://eslint.org/docs/rules/one-var",target:"_blank",rel:"noopener noreferrer"},Dn=(0,e._)("code",null,"one-var",-1),On=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">var</span> verbose <span class="token operator">=</span> <span class="token boolean">true</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> verbose <span class="token operator">=</span> <span class="token boolean">true</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    verbose <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',1),An=(0,e._)("p",null,[(0,e._)("strong",null,"条件语句中赋值语句"),(0,e.Uk)("使用括号包起来。这样使得代码更加清晰可读，而不会认为是将条件判断语句的全等号（"),(0,e._)("code",null,"==="),(0,e.Uk)("）错写成了等号（"),(0,e._)("code",null,"="),(0,e.Uk)("）。")],-1),Hn=(0,e.Uk)("eslint: "),Cn={href:"http://eslint.org/docs/rules/no-cond-assign",target:"_blank",rel:"noopener noreferrer"},Tn=(0,e._)("code",null,"no-cond-assign",-1),Rn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),zn=(0,e._)("p",null,[(0,e._)("strong",null,"单行代码块两边加空格"),(0,e.Uk)("。")],-1),$n=(0,e.Uk)("eslint: "),In={href:"http://eslint.org/docs/rules/block-spacing",target:"_blank",rel:"noopener noreferrer"},Mn=(0,e._)("code",null,"block-spacing",-1),Pn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Bn=(0,e._)("p",null,[(0,e._)("strong",null,"对于变量和函数名统一使用驼峰命名法"),(0,e.Uk)("。")],-1),Vn=(0,e.Uk)("eslint: "),Yn={href:"http://eslint.org/docs/rules/camelcase",target:"_blank",rel:"noopener noreferrer"},Ln=(0,e._)("code",null,"camelcase",-1),Gn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">my_function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>\n\n  <span class="token keyword">var</span> my_var <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>           <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">var</span> myVar <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>            <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Kn=(0,e._)("p",null,[(0,e._)("strong",null,"不允许有多余的行末逗号"),(0,e.Uk)("。")],-1),Qn=(0,e.Uk)("eslint: "),Xn={href:"http://eslint.org/docs/rules/comma-dangle",target:"_blank",rel:"noopener noreferrer"},Zn=(0,e._)("code",null,"comma-dangle",-1),ns=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),ss=(0,e._)("p",null,[(0,e._)("strong",null,"始终将逗号置于行末"),(0,e.Uk)("。")],-1),as=(0,e.Uk)("eslint: "),es={href:"http://eslint.org/docs/rules/comma-style",target:"_blank",rel:"noopener noreferrer"},ps=(0,e._)("code",null,"comma-style",-1),ls=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>\n    <span class="token punctuation">,</span>bar<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>\n    bar<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>   <span class="token comment">// ✓ ok</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),ts=(0,e._)("p",null,[(0,e._)("strong",null,"点号操作符须与属性需在同一行"),(0,e.Uk)("。")],-1),os=(0,e.Uk)("eslint: "),cs={href:"http://eslint.org/docs/rules/dot-location",target:"_blank",rel:"noopener noreferrer"},rs=(0,e._)("code",null,"dot-location",-1),us=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  console<span class="token punctuation">.</span>\n    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// ✗ avoid</span>\n\n  console\n    <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),is=(0,e._)("p",null,[(0,e._)("strong",null,"文件末尾留一空行"),(0,e.Uk)("。")],-1),ks=(0,e.Uk)("eslint: "),ms={href:"http://eslint.org/docs/rules/eol-last",target:"_blank",rel:"noopener noreferrer"},ds=(0,e._)("code",null,"eol-last",-1),bs=(0,e._)("p",null,[(0,e._)("strong",null,"函数调用时标识符与括号间不留间隔"),(0,e.Uk)("。")],-1),gs=(0,e.Uk)("eslint: "),vs={href:"http://eslint.org/docs/rules/func-call-spacing",target:"_blank",rel:"noopener noreferrer"},_s=(0,e._)("code",null,"func-call-spacing",-1),fs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ✗ avoid</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),js=(0,e._)("p",null,[(0,e._)("strong",null,"键值对当中冒号与值之间要留空白"),(0,e.Uk)("。")],-1),hs=(0,e.Uk)("eslint: "),ws={href:"http://eslint.org/docs/rules/key-spacing",target:"_blank",rel:"noopener noreferrer"},ys=(0,e._)("code",null,"key-spacing",-1),Us=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span> <span class="token operator">:</span><span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span><span class="token operator">:</span><span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;key&#39;</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),xs=(0,e._)("p",null,[(0,e._)("strong",null,"构造函数要以大写字母开头"),(0,e.Uk)("。")],-1),Es=(0,e.Uk)("eslint: "),Ws={href:"http://eslint.org/docs/rules/new-cap",target:"_blank",rel:"noopener noreferrer"},Fs=(0,e._)("code",null,"new-cap",-1),qs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Js=(0,e._)("p",null,[(0,e._)("strong",null,"无参的构造函数调用时要带上括号"),(0,e.Uk)("。")],-1),Ss=(0,e.Uk)("eslint: "),Ns={href:"http://eslint.org/docs/rules/new-parens",target:"_blank",rel:"noopener noreferrer"},Ds=(0,e._)("code",null,"new-parens",-1),Os=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),As=(0,e._)("p",null,[(0,e._)("strong",null,"对象中定义了存值器，一定要对应的定义取值器"),(0,e.Uk)("。")],-1),Hs=(0,e.Uk)("eslint: "),Cs={href:"http://eslint.org/docs/rules/accessor-pairs",target:"_blank",rel:"noopener noreferrer"},Ts=(0,e._)("code",null,"accessor-pairs",-1),Rs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">set</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ✗ avoid</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">set</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// ✓ ok</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',1),zs=(0,e._)("p",null,[(0,e._)("strong",null,"子类的构造器中一定要调用 super")],-1),$s=(0,e.Uk)("eslint: "),Is={href:"http://eslint.org/docs/rules/constructor-super",target:"_blank",rel:"noopener noreferrer"},Ms=(0,e._)("code",null,"constructor-super",-1),Ps=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Mammal</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),Bs=(0,e._)("p",null,[(0,e._)("strong",null,"使用数组字面量而不是构造器"),(0,e.Uk)("。")],-1),Vs=(0,e.Uk)("eslint: "),Ys={href:"http://eslint.org/docs/rules/no-array-constructor",target:"_blank",rel:"noopener noreferrer"},Ls=(0,e._)("code",null,"no-array-constructor",-1),Gs=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>            <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Ks=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用 arguments.callee 和 arguments.caller"),(0,e.Uk)("。")],-1),Qs=(0,e.Uk)("eslint: "),Xs={href:"http://eslint.org/docs/rules/no-caller",target:"_blank",rel:"noopener noreferrer"},Zs=(0,e._)("code",null,"no-caller",-1),na=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n  arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n  <span class="token function">foo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),sa=(0,e._)("p",null,[(0,e._)("strong",null,"避免对类名重新赋值"),(0,e.Uk)("。")],-1),aa=(0,e.Uk)("eslint: "),ea={href:"http://eslint.org/docs/rules/no-class-assign",target:"_blank",rel:"noopener noreferrer"},pa=(0,e._)("code",null,"no-class-assign",-1),la=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nDog <span class="token operator">=</span> <span class="token string">&#39;Fido&#39;</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ta=(0,e._)("p",null,[(0,e._)("strong",null,"避免修改使用 const 声明的变量"),(0,e.Uk)("。")],-1),oa=(0,e.Uk)("eslint: "),ca={href:"http://eslint.org/docs/rules/no-const-assign",target:"_blank",rel:"noopener noreferrer"},ra=(0,e._)("code",null,"no-const-assign",-1),ua=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">100</span>\nscore <span class="token operator">=</span> <span class="token number">125</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ia=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用常量作为条件表达式的条件（循环语句除外）"),(0,e.Uk)("。")],-1),ka=(0,e.Uk)("eslint: "),ma={href:"http://eslint.org/docs/rules/no-constant-condition",target:"_blank",rel:"noopener noreferrer"},da=(0,e._)("code",null,"no-constant-condition",-1),ba=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),ga=(0,e._)("p",null,[(0,e._)("strong",null,"正则中不要使用控制符"),(0,e.Uk)("。")],-1),va=(0,e.Uk)("eslint: "),_a={href:"http://eslint.org/docs/rules/no-control-regex",target:"_blank",rel:"noopener noreferrer"},fa=(0,e._)("code",null,"no-control-regex",-1),ja=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\x1f</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\x20</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ha=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用 debugger"),(0,e.Uk)("。")],-1),wa=(0,e.Uk)("eslint: "),ya={href:"http://eslint.org/docs/rules/no-debugger",target:"_blank",rel:"noopener noreferrer"},Ua=(0,e._)("code",null,"no-debugger",-1),xa=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">debugger</span>      <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Ea=(0,e._)("p",null,[(0,e._)("strong",null,"不要对变量使用 delete 操作"),(0,e.Uk)("。")],-1),Wa=(0,e.Uk)("eslint: "),Fa={href:"http://eslint.org/docs/rules/no-delete-var",target:"_blank",rel:"noopener noreferrer"},qa=(0,e._)("code",null,"no-delete-var",-1),Ja=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name\n<span class="token keyword">delete</span> name     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Sa=(0,e._)("p",null,[(0,e._)("strong",null,"不要定义冗余的函数参数"),(0,e.Uk)("。")],-1),Na=(0,e.Uk)("eslint: "),Da={href:"http://eslint.org/docs/rules/no-dupe-args",target:"_blank",rel:"noopener noreferrer"},Oa=(0,e._)("code",null,"no-dupe-args",-1),Aa=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✗ avoid</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Ha=(0,e._)("p",null,[(0,e._)("strong",null,"类中不要定义冗余的属性"),(0,e.Uk)("。")],-1),Ca=(0,e.Uk)("eslint: "),Ta={href:"http://eslint.org/docs/rules/no-dupe-class-members",target:"_blank",rel:"noopener noreferrer"},Ra=(0,e._)("code",null,"no-dupe-class-members",-1),za=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  <span class="token function">bark</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">bark</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),$a=(0,e._)("p",null,[(0,e._)("strong",null,"对象字面量中不要定义重复的属性"),(0,e.Uk)("。")],-1),Ia=(0,e.Uk)("eslint: "),Ma={href:"http://eslint.org/docs/rules/no-dupe-keys",target:"_blank",rel:"noopener noreferrer"},Pa=(0,e._)("code",null,"no-dupe-keys",-1),Ba=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Va=(0,e._)("p",null,[(0,e._)("strong",null,"switch 语句中不要定义重复的 case 分支"),(0,e.Uk)("。")],-1),Ya=(0,e.Uk)("eslint: "),La={href:"http://eslint.org/docs/rules/no-duplicate-case",target:"_blank",rel:"noopener noreferrer"},Ga=(0,e._)("code",null,"no-duplicate-case",-1),Ka=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token comment">// ...</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Qa=(0,e._)("p",null,[(0,e._)("strong",null,"同一模块有多个导入时一次性写完"),(0,e.Uk)("。")],-1),Xa=(0,e.Uk)("eslint: "),Za={href:"http://eslint.org/docs/rules/no-duplicate-imports",target:"_blank",rel:"noopener noreferrer"},ne=(0,e._)("code",null,"no-duplicate-imports",-1),se=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span>          <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc1<span class="token punctuation">,</span> myFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span> <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),ae=(0,e._)("p",null,[(0,e._)("strong",null,"正则中不要使用空字符"),(0,e.Uk)("。")],-1),ee=(0,e.Uk)("eslint: "),pe={href:"http://eslint.org/docs/rules/no-empty-character-class",target:"_blank",rel:"noopener noreferrer"},le=(0,e._)("code",null,"no-empty-character-class",-1),te=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc[]</span><span class="token regex-delimiter">/</span></span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> myRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc[a-z]</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),oe=(0,e._)("p",null,[(0,e._)("strong",null,"不要解构空值"),(0,e.Uk)("。")],-1),ce=(0,e.Uk)("eslint: "),re={href:"http://eslint.org/docs/rules/no-empty-pattern",target:"_blank",rel:"noopener noreferrer"},ue=(0,e._)("code",null,"no-empty-pattern",-1),ie=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> foo         <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token punctuation">{</span> b <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> foo      <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ke=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用 eval()"),(0,e.Uk)("。")],-1),me=(0,e.Uk)("eslint: "),de={href:"http://eslint.org/docs/rules/no-eval",target:"_blank",rel:"noopener noreferrer"},be=(0,e._)("code",null,"no-eval",-1),ge=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span> <span class="token string">&quot;var result = user.&quot;</span> <span class="token operator">+</span> propName <span class="token punctuation">)</span> <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> user<span class="token punctuation">[</span>propName<span class="token punctuation">]</span>             <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ve=(0,e._)("p",null,[(0,e._)("strong",null,"catch 中不要对错误重新赋值"),(0,e.Uk)("。")],-1),_e=(0,e.Uk)("eslint: "),fe={href:"http://eslint.org/docs/rules/no-ex-assign",target:"_blank",rel:"noopener noreferrer"},je=(0,e._)("code",null,"no-ex-assign",-1),he=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  e <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>             <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>  <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),we=(0,e._)("p",null,[(0,e._)("strong",null,"不要扩展原生对象"),(0,e.Uk)("。")],-1),ye=(0,e.Uk)("eslint: "),Ue={href:"http://eslint.org/docs/rules/no-extend-native",target:"_blank",rel:"noopener noreferrer"},xe=(0,e._)("code",null,"no-extend-native",-1),Ee=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),We=(0,e._)("p",null,[(0,e._)("strong",null,"避免多余的函数上下文绑定"),(0,e.Uk)("。")],-1),Fe=(0,e.Uk)("eslint: "),qe={href:"http://eslint.org/docs/rules/no-extra-bind",target:"_blank",rel:"noopener noreferrer"},Je=(0,e._)("code",null,"no-extra-bind",-1),Se=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Ne=(0,e._)("p",null,[(0,e._)("strong",null,"避免不必要的布尔转换"),(0,e.Uk)("。")],-1),De=(0,e.Uk)("eslint: "),Oe={href:"http://eslint.org/docs/rules/no-extra-boolean-cast",target:"_blank",rel:"noopener noreferrer"},Ae=(0,e._)("code",null,"no-extra-boolean-cast",-1),He=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// ✗ avoid</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// ✓ ok</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),Ce=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用多余的括号包裹函数"),(0,e.Uk)("。")],-1),Te=(0,e.Uk)("eslint: "),Re={href:"http://eslint.org/docs/rules/no-extra-parens",target:"_blank",rel:"noopener noreferrer"},ze=(0,e._)("code",null,"no-extra-parens",-1),$e=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Ie=(0,e._)("p",null,[(0,e._)("strong",null,"switch 一定要使用 break 来将条件分支正常中断"),(0,e.Uk)("。")],-1),Me=(0,e.Uk)("eslint: "),Pe={href:"http://eslint.org/docs/rules/no-fallthrough",target:"_blank",rel:"noopener noreferrer"},Be=(0,e._)("code",null,"no-fallthrough",-1),Ve=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">break</span>           <span class="token comment">// ✓ ok</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// fallthrough  // ✓ ok</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',1),Ye=(0,e._)("p",null,[(0,e._)("strong",null,"不要省去小数点前面的0"),(0,e.Uk)("。")],-1),Le=(0,e.Uk)("eslint: "),Ge={href:"http://eslint.org/docs/rules/no-floating-decimal",target:"_blank",rel:"noopener noreferrer"},Ke=(0,e._)("code",null,"no-floating-decimal",-1),Qe=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> discount <span class="token operator">=</span> <span class="token number">.5</span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> discount <span class="token operator">=</span> <span class="token number">0.5</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Xe=(0,e._)("p",null,[(0,e._)("strong",null,"避免对声明过的函数重新赋值"),(0,e.Uk)("。")],-1),Ze=(0,e.Uk)("eslint: "),np={href:"http://eslint.org/docs/rules/no-func-assign",target:"_blank",rel:"noopener noreferrer"},sp=(0,e._)("code",null,"no-func-assign",-1),ap=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\nmyFunc <span class="token operator">=</span> myOtherFunc    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ep=(0,e._)("p",null,[(0,e._)("strong",null,"不要对全局只读对象重新赋值"),(0,e.Uk)("。")],-1),pp=(0,e.Uk)("eslint: "),lp={href:"http://eslint.org/docs/rules/no-global-assign",target:"_blank",rel:"noopener noreferrer"},tp=(0,e._)("code",null,"no-global-assign",-1),op=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),cp=(0,e._)("p",null,[(0,e._)("strong",null,"注意隐式的 eval()"),(0,e.Uk)("。")],-1),rp=(0,e.Uk)("eslint: "),up={href:"http://eslint.org/docs/rules/no-implied-eval",target:"_blank",rel:"noopener noreferrer"},ip=(0,e._)("code",null,"no-implied-eval",-1),kp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">&quot;alert(&#39;Hello world&#39;)&quot;</span><span class="token punctuation">)</span>                   <span class="token comment">// ✗ avoid</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),mp=(0,e._)("p",null,[(0,e._)("strong",null,"嵌套的代码块中禁止再定义函数"),(0,e.Uk)("。")],-1),dp=(0,e.Uk)("eslint: "),bp={href:"http://eslint.org/docs/rules/no-inner-declarations",target:"_blank",rel:"noopener noreferrer"},gp=(0,e._)("code",null,"no-inner-declarations",-1),vp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">setAuthUser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),_p=(0,e._)("p",null,[(0,e._)("strong",null,"不要向 RegExp 构造器传入非法的正则表达式"),(0,e.Uk)("。")],-1),fp=(0,e.Uk)("eslint: "),jp={href:"http://eslint.org/docs/rules/no-invalid-regexp",target:"_blank",rel:"noopener noreferrer"},hp=(0,e._)("code",null,"no-invalid-regexp",-1),wp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[a-z&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),yp=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用非法的空白符"),(0,e.Uk)("。")],-1),Up=(0,e.Uk)("eslint: "),xp={href:"http://eslint.org/docs/rules/no-irregular-whitespace",target:"_blank",rel:"noopener noreferrer"},Ep=(0,e._)("code",null,"no-irregular-whitespace",-1),Wp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/*&lt;NBSP&gt;*/</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Fp=(0,e._)("p",null,[(0,e._)("strong",null,[(0,e.Uk)("禁止使用 "),(0,e._)("strong",null,"iterator")]),(0,e.Uk)("。")],-1),qp=(0,e.Uk)("eslint: "),Jp={href:"http://eslint.org/docs/rules/no-iterator",target:"_blank",rel:"noopener noreferrer"},Sp=(0,e._)("code",null,"no-iterator",-1),Np=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">__iterator__</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Dp=(0,e._)("p",null,[(0,e._)("strong",null,"外部变量不要与对象属性重名"),(0,e.Uk)("。")],-1),Op=(0,e.Uk)("eslint: "),Ap={href:"http://eslint.org/docs/rules/no-label-var",target:"_blank",rel:"noopener noreferrer"},Hp=(0,e._)("code",null,"no-label-var",-1),Cp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token keyword">function</span> <span class="token function">game</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  score<span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ✗ avoid</span>\n    score <span class="token operator">-=</span> <span class="token number">10</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> score\n    <span class="token keyword">break</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),Tp=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用标签语句"),(0,e.Uk)("。")],-1),Rp=(0,e.Uk)("eslint: "),zp={href:"http://eslint.org/docs/rules/no-labels",target:"_blank",rel:"noopener noreferrer"},$p=(0,e._)("code",null,"no-labels",-1),Ip=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>label<span class="token operator">:</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">break</span> label     <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Mp=(0,e._)("p",null,[(0,e._)("strong",null,"不要书写不必要的嵌套代码块"),(0,e.Uk)("。")],-1),Pp=(0,e.Uk)("eslint: "),Bp={href:"http://eslint.org/docs/rules/no-lone-blocks",target:"_blank",rel:"noopener noreferrer"},Vp=(0,e._)("code",null,"no-lone-blocks",-1),Yp=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>                   <span class="token comment">// ✗ avoid</span>\n    <span class="token function">myOtherFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">myOtherFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),Lp=(0,e._)("p",null,[(0,e._)("strong",null,"不要混合使用空格与制表符作为缩进"),(0,e.Uk)("。")],-1),Gp=(0,e.Uk)("eslint: "),Kp={href:"http://eslint.org/docs/rules/no-mixed-spaces-and-tabs",target:"_blank",rel:"noopener noreferrer"},Qp=(0,e._)("code",null,"no-mixed-spaces-and-tabs",-1),Xp=(0,e._)("p",null,[(0,e._)("strong",null,"除了缩进，不要使用多个空格"),(0,e.Uk)("。")],-1),Zp=(0,e.Uk)("eslint: "),nl={href:"http://eslint.org/docs/rules/no-multi-spaces",target:"_blank",rel:"noopener noreferrer"},sl=(0,e._)("code",null,"no-multi-spaces",-1),al=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> id <span class="token operator">=</span>    <span class="token number">1234</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token number">1234</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),el=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用多行字符串"),(0,e.Uk)("。")],-1),pl=(0,e.Uk)("eslint: "),ll={href:"http://eslint.org/docs/rules/no-multi-str",target:"_blank",rel:"noopener noreferrer"},tl=(0,e._)("code",null,"no-multi-str",-1),ol=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello \\\n                 world&#39;</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),cl=(0,e._)("p",null,[(0,e._)("strong",null,"new 创建对象实例后需要赋值给变量"),(0,e.Uk)("。")],-1),rl=(0,e.Uk)("eslint: "),ul={href:"http://eslint.org/docs/rules/no-new",target:"_blank",rel:"noopener noreferrer"},il=(0,e._)("code",null,"no-new",-1),kl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> character <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ml=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 Function 构造器"),(0,e.Uk)("。")],-1),dl=(0,e.Uk)("eslint: "),bl={href:"http://eslint.org/docs/rules/no-new-func",target:"_blank",rel:"noopener noreferrer"},gl=(0,e._)("code",null,"no-new-func",-1),vl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),_l=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 Object 构造器"),(0,e.Uk)("。")],-1),fl=(0,e.Uk)("eslint: "),jl={href:"http://eslint.org/docs/rules/no-new-object",target:"_blank",rel:"noopener noreferrer"},hl=(0,e._)("code",null,"no-new-object",-1),wl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),yl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 new require"),(0,e.Uk)("。")],-1),Ul=(0,e.Uk)("eslint: "),xl={href:"http://eslint.org/docs/rules/no-new-require",target:"_blank",rel:"noopener noreferrer"},El=(0,e._)("code",null,"no-new-require",-1),Wl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">require</span><span class="token punctuation">(</span><span class="token string">&#39;my-module&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Fl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 Symbol 构造器"),(0,e.Uk)("。")],-1),ql=(0,e.Uk)("eslint: "),Jl={href:"http://eslint.org/docs/rules/no-new-symbol",target:"_blank",rel:"noopener noreferrer"},Sl=(0,e._)("code",null,"no-new-symbol",-1),Nl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Dl=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用原始包装器"),(0,e.Uk)("。")],-1),Ol=(0,e.Uk)("eslint: "),Al={href:"http://eslint.org/docs/rules/no-new-wrappers",target:"_blank",rel:"noopener noreferrer"},Hl=(0,e._)("code",null,"no-new-wrappers",-1),Cl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Tl=(0,e._)("p",null,[(0,e._)("strong",null,"不要将全局对象的属性作为函数调用"),(0,e.Uk)("。")],-1),Rl=(0,e.Uk)("eslint: "),zl={href:"http://eslint.org/docs/rules/no-obj-calls",target:"_blank",rel:"noopener noreferrer"},$l=(0,e._)("code",null,"no-obj-calls",-1),Il=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Ml=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用八进制字面量"),(0,e.Uk)("。")],-1),Pl=(0,e.Uk)("eslint: "),Bl={href:"http://eslint.org/docs/rules/no-octal",target:"_blank",rel:"noopener noreferrer"},Vl=(0,e._)("code",null,"no-octal",-1),Yl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">042</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token string">&#39;042&#39;</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Ll=(0,e._)("p",null,[(0,e._)("strong",null,"字符串字面量中也不要使用八进制转义字符"),(0,e.Uk)("。")],-1),Gl=(0,e.Uk)("eslint: "),Kl={href:"http://eslint.org/docs/rules/no-octal-escape",target:"_blank",rel:"noopener noreferrer"},Ql=(0,e._)("code",null,"no-octal-escape",-1),Xl=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copyright <span class="token operator">=</span> <span class="token string">&#39;Copyright \\251&#39;</span>  <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Zl=(0,e._)("p",null,[(0,e._)("strong",null,"使用 __dirname 和 __filename 时尽量避免使用字符串拼接"),(0,e.Uk)("。")],-1),nt=(0,e.Uk)("eslint: "),st={href:"http://eslint.org/docs/rules/no-path-concat",target:"_blank",rel:"noopener noreferrer"},at=(0,e._)("code",null,"no-path-concat",-1),et=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pathToFile <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/app.js&#39;</span>            <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> pathToFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;app.js&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),pt=(0,e._)("p",null,[(0,e.Uk)("使用 "),(0,e._)("code",null,"getPrototypeOf"),(0,e.Uk)(" 来替代 "),(0,e._)("strong",null,[(0,e._)("strong",null,"proto")]),(0,e.Uk)("。")],-1),lt=(0,e.Uk)("eslint: "),tt={href:"http://eslint.org/docs/rules/no-proto",target:"_blank",rel:"noopener noreferrer"},ot=(0,e._)("code",null,"no-proto",-1),ct=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__               <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),rt=(0,e._)("p",null,[(0,e._)("strong",null,"不要重复声明变量"),(0,e.Uk)("。")],-1),ut=(0,e.Uk)("eslint: "),it={href:"http://eslint.org/docs/rules/no-redeclare",target:"_blank",rel:"noopener noreferrer"},kt=(0,e._)("code",null,"no-redeclare",-1),mt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Jane&#39;</span>     <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>\nname <span class="token operator">=</span> <span class="token string">&#39;Jane&#39;</span>         <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),dt=(0,e._)("p",null,[(0,e._)("strong",null,"正则中避免使用多个空格"),(0,e.Uk)("。")],-1),bt=(0,e.Uk)("eslint: "),gt={href:"http://eslint.org/docs/rules/no-regex-spaces",target:"_blank",rel:"noopener noreferrer"},vt=(0,e._)("code",null,"no-regex-spaces",-1),_t=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test   value</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test {3}value</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">// ✓ ok</span>\n<span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test value</span><span class="token regex-delimiter">/</span></span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),ft=(0,e._)("p",null,[(0,e._)("strong",null,"return 语句中的赋值必需有括号包裹"),(0,e.Uk)("。")],-1),jt=(0,e.Uk)("eslint: "),ht={href:"http://eslint.org/docs/rules/no-return-assign",target:"_blank",rel:"noopener noreferrer"},wt=(0,e._)("code",null,"no-return-assign",-1),yt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Ut=(0,e._)("p",null,[(0,e._)("strong",null,"避免将变量赋值给自己"),(0,e.Uk)("。")],-1),xt=(0,e.Uk)("eslint: "),Et={href:"http://eslint.org/docs/rules/no-self-assign",target:"_blank",rel:"noopener noreferrer"},Wt=(0,e._)("code",null,"no-self-assign",-1),Ft=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>name <span class="token operator">=</span> name   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),qt=(0,e._)("p",null,[(0,e._)("strong",null,"避免将变量与自己进行比较操作"),(0,e.Uk)("。")],-1),Jt=(0,e.Uk)("esint: "),St={href:"http://eslint.org/docs/rules/no-self-compare",target:"_blank",rel:"noopener noreferrer"},Nt=(0,e._)("code",null,"no-self-compare",-1),Dt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">===</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Ot=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用逗号操作符"),(0,e.Uk)("。")],-1),At=(0,e.Uk)("eslint: "),Ht={href:"http://eslint.org/docs/rules/no-sequences",target:"_blank",rel:"noopener noreferrer"},Ct=(0,e._)("code",null,"no-sequences",-1),Tt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Rt=(0,e._)("p",null,[(0,e._)("strong",null,"不要随意更改关键字的值"),(0,e.Uk)("。")],-1),zt=(0,e.Uk)("eslint: "),$t={href:"http://eslint.org/docs/rules/no-shadow-restricted-names",target:"_blank",rel:"noopener noreferrer"},It=(0,e._)("code",null,"no-shadow-restricted-names",-1),Mt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>     <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Pt=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用稀疏数组（Sparse arrays）"),(0,e.Uk)("。")],-1),Bt=(0,e.Uk)("eslint: "),Vt={href:"http://eslint.org/docs/rules/no-sparse-arrays",target:"_blank",rel:"noopener noreferrer"},Yt=(0,e._)("code",null,"no-sparse-arrays",-1),Lt=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Gt=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用制表符"),(0,e.Uk)("。")],-1),Kt=(0,e.Uk)("eslint: "),Qt={href:"http://eslint.org/docs/rules/no-tabs",target:"_blank",rel:"noopener noreferrer"},Xt=(0,e._)("code",null,"no-tabs",-1),Zt=(0,e._)("p",null,[(0,e._)("strong",null,"正确使用 ES6 中的字符串模板"),(0,e.Uk)("。")],-1),no=(0,e.Uk)("eslint: "),so={href:"http://eslint.org/docs/rules/no-template-curly-in-string",target:"_blank",rel:"noopener noreferrer"},ao=(0,e._)("code",null,"no-template-curly-in-string",-1),eo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello ${name}&#39;</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),po=(0,e._)("p",null,[(0,e._)("strong",null,"使用 this 前请确保 super() 已调用"),(0,e.Uk)("。")],-1),lo=(0,e.Uk)("eslint: "),to={href:"http://eslint.org/docs/rules/no-this-before-super",target:"_blank",rel:"noopener noreferrer"},oo=(0,e._)("code",null,"no-this-before-super",-1),co=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">4</span>     <span class="token comment">// ✗ avoid</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',1),ro=(0,e._)("p",null,[(0,e._)("strong",null,"用 throw 抛错时，抛出 Error 对象而不是字符串"),(0,e.Uk)("。")],-1),uo=(0,e.Uk)("eslint: "),io={href:"http://eslint.org/docs/rules/no-throw-literal",target:"_blank",rel:"noopener noreferrer"},ko=(0,e._)("code",null,"no-throw-literal",-1),mo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">throw</span> <span class="token string">&#39;error&#39;</span>               <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),bo=(0,e._)("p",null,[(0,e._)("strong",null,"行末不留空格"),(0,e.Uk)("。")],-1),go=(0,e.Uk)("eslint: "),vo={href:"http://eslint.org/docs/rules/no-trailing-spaces",target:"_blank",rel:"noopener noreferrer"},_o=(0,e._)("code",null,"no-trailing-spaces",-1),fo=(0,e._)("p",null,[(0,e._)("strong",null,"不要使用 undefined 来初始化变量"),(0,e.Uk)("。")],-1),jo=(0,e.Uk)("eslint: "),ho={href:"http://eslint.org/docs/rules/no-undef-init",target:"_blank",rel:"noopener noreferrer"},wo=(0,e._)("code",null,"no-undef-init",-1),yo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">let</span> name\nname <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>          <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Uo=(0,e._)("p",null,[(0,e._)("strong",null,"循环语句中注意更新循环变量"),(0,e.Uk)("。")],-1),xo=(0,e.Uk)("eslint: "),Eo={href:"http://eslint.org/docs/rules/no-unmodified-loop-condition",target:"_blank",rel:"noopener noreferrer"},Wo=(0,e._)("code",null,"no-unmodified-loop-condition",-1),Fo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),qo=(0,e._)("p",null,[(0,e._)("strong",null,"如果有更好的实现，尽量不要使用三元表达式"),(0,e.Uk)("。")],-1),Jo=(0,e.Uk)("eslint: "),So={href:"http://eslint.org/docs/rules/no-unneeded-ternary",target:"_blank",rel:"noopener noreferrer"},No=(0,e._)("code",null,"no-unneeded-ternary",-1),Do=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> score <span class="token operator">=</span> val <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token number">0</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">let</span> score <span class="token operator">=</span> val <span class="token operator">||</span> <span class="token number">0</span>          <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Oo=(0,e._)("p",null,[(0,e._)("strong",null,"return，throw，continue 和 break 后不要再跟代码"),(0,e.Uk)("。")],-1),Ao=(0,e.Uk)("eslint: "),Ho={href:"http://eslint.org/docs/rules/no-unreachable",target:"_blank",rel:"noopener noreferrer"},Co=(0,e._)("code",null,"no-unreachable",-1),To=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;never called&#39;</span><span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Ro=(0,e._)("p",null,[(0,e._)("strong",null,"finally 代码块中不要再改变程序执行流程"),(0,e.Uk)("。")],-1),zo=(0,e.Uk)("eslint: "),$o={href:"http://eslint.org/docs/rules/no-unsafe-finally",target:"_blank",rel:"noopener noreferrer"},Io=(0,e._)("code",null,"no-unsafe-finally",-1),Mo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">42</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Po=(0,e._)("p",null,[(0,e._)("strong",null,"关系运算符的左值不要做取反操作"),(0,e.Uk)("。")],-1),Bo=(0,e.Uk)("eslint: "),Vo={href:"http://eslint.org/docs/rules/no-unsafe-negation",target:"_blank",rel:"noopener noreferrer"},Yo=(0,e._)("code",null,"no-unsafe-negation",-1),Lo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Go=(0,e._)("p",null,[(0,e._)("strong",null,"避免不必要的 .call() 和 .apply()"),(0,e.Uk)("。")],-1),Ko=(0,e.Uk)("eslint: "),Qo={href:"http://eslint.org/docs/rules/no-useless-call",target:"_blank",rel:"noopener noreferrer"},Xo=(0,e._)("code",null,"no-useless-call",-1),Zo=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),nc=(0,e._)("p",null,[(0,e._)("strong",null,"避免使用不必要的计算值作对象属性"),(0,e.Uk)("。")],-1),sc=(0,e.Uk)("eslint: "),ac={href:"http://eslint.org/docs/rules/no-useless-computed-key",target:"_blank",rel:"noopener noreferrer"},ec=(0,e._)("code",null,"no-useless-computed-key",-1),pc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),lc=(0,e._)("p",null,[(0,e._)("strong",null,"禁止多余的构造器"),(0,e.Uk)("。")],-1),tc=(0,e.Uk)("eslint: "),oc={href:"http://eslint.org/docs/rules/no-useless-constructor",target:"_blank",rel:"noopener noreferrer"},cc=(0,e._)("code",null,"no-useless-constructor",-1),rc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ✗ avoid</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),uc=(0,e._)("p",null,[(0,e._)("strong",null,"禁止不必要的转义"),(0,e.Uk)("。")],-1),ic=(0,e.Uk)("eslint: "),kc={href:"http://eslint.org/docs/rules/no-useless-escape",target:"_blank",rel:"noopener noreferrer"},mc=(0,e._)("code",null,"no-useless-escape",-1),dc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Hell\\o&#39;</span>  <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),bc=(0,e._)("p",null,[(0,e._)("strong",null,"import, export 和解构操作中，禁止赋值到同名变量"),(0,e.Uk)("。")],-1),gc=(0,e.Uk)("eslint: "),vc={href:"http://eslint.org/docs/rules/no-useless-rename",target:"_blank",rel:"noopener noreferrer"},_c=(0,e._)("code",null,"no-useless-rename",-1),fc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token keyword">as</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./config&#39;</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./config&#39;</span>               <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),jc=(0,e._)("p",null,[(0,e._)("strong",null,"属性前面不要加空格"),(0,e.Uk)("。")],-1),hc=(0,e.Uk)("eslint: "),wc={href:"http://eslint.org/docs/rules/no-whitespace-before-property",target:"_blank",rel:"noopener noreferrer"},yc=(0,e._)("code",null,"no-whitespace-before-property",-1),Uc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>user <span class="token punctuation">.</span>name      <span class="token comment">// ✗ avoid</span>\nuser<span class="token punctuation">.</span>name       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),xc=(0,e._)("p",null,[(0,e._)("strong",null,"禁止使用 with"),(0,e.Uk)("。")],-1),Ec=(0,e.Uk)("eslint: "),Wc={href:"http://eslint.org/docs/rules/no-with",target:"_blank",rel:"noopener noreferrer"},Fc=(0,e._)("code",null,"no-with",-1),qc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Jc=(0,e._)("p",null,[(0,e._)("strong",null,"对象属性换行时注意统一代码风格"),(0,e.Uk)("。")],-1),Sc=(0,e.Uk)("eslint: "),Nc={href:"http://eslint.org/docs/rules/object-property-newline",target:"_blank",rel:"noopener noreferrer"},Dc=(0,e._)("code",null,"object-property-newline",-1),Oc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span>            <span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> username<span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span> <span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span>\n<span class="token punctuation">}</span>                                                                 <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),Ac=(0,e._)("p",null,[(0,e._)("strong",null,"代码块中避免多余留白"),(0,e.Uk)("。")],-1),Hc=(0,e.Uk)("eslint: "),Cc={href:"http://eslint.org/docs/rules/padded-blocks",target:"_blank",rel:"noopener noreferrer"},Tc=(0,e._)("code",null,"padded-blocks",-1),Rc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token comment">// ✗ avoid</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),zc=(0,e._)("p",null,[(0,e._)("strong",null,"展开运算符与它的表达式间不要留空白"),(0,e.Uk)("。")],-1),$c=(0,e.Uk)("eslint: "),Ic={href:"http://eslint.org/docs/rules/rest-spread-spacing",target:"_blank",rel:"noopener noreferrer"},Mc=(0,e._)("code",null,"rest-spread-spacing",-1),Pc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span> args<span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Bc=(0,e._)("p",null,[(0,e._)("strong",null,"遇到分号时空格要后留前不留"),(0,e.Uk)("。")],-1),Vc=(0,e.Uk)("eslint: "),Yc={href:"http://eslint.org/docs/rules/semi-spacing",target:"_blank",rel:"noopener noreferrer"},Lc=(0,e._)("code",null,"semi-spacing",-1),Gc=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Kc=(0,e._)("p",null,[(0,e._)("strong",null,"代码块首尾留空格"),(0,e.Uk)("。")],-1),Qc=(0,e.Uk)("eslint: "),Xc={href:"http://eslint.org/docs/rules/space-before-blocks",target:"_blank",rel:"noopener noreferrer"},Zc=(0,e._)("code",null,"space-before-blocks",-1),nr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),sr=(0,e._)("p",null,[(0,e._)("strong",null,"圆括号间不留空格"),(0,e.Uk)("。")],-1),ar=(0,e.Uk)("eslint: "),er={href:"http://eslint.org/docs/rules/space-in-parens",target:"_blank",rel:"noopener noreferrer"},pr=(0,e._)("code",null,"space-in-parens",-1),lr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getName</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token function">getName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),tr=(0,e._)("p",null,[(0,e._)("strong",null,"一元运算符后面跟一个空格"),(0,e.Uk)("。")],-1),or=(0,e.Uk)("eslint: "),cr={href:"http://eslint.org/docs/rules/space-unary-ops",target:"_blank",rel:"noopener noreferrer"},rr=(0,e._)("code",null,"space-unary-ops",-1),ur=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span><span class="token operator">!</span>admin        <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">typeof</span> <span class="token operator">!</span>admin        <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ir=(0,e._)("p",null,[(0,e._)("strong",null,"注释首尾留空格"),(0,e.Uk)("。")],-1),kr=(0,e.Uk)("eslint: "),mr={href:"http://eslint.org/docs/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"},dr=(0,e._)("code",null,"spaced-comment",-1),br=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//comment           // ✗ avoid</span>\n<span class="token comment">// comment          // ✓ ok</span>\n\n<span class="token comment">/*comment*/</span>         <span class="token comment">// ✗ avoid</span>\n<span class="token comment">/* comment */</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),gr=(0,e._)("p",null,[(0,e._)("strong",null,"模板字符串中变量前后不加空格"),(0,e.Uk)("。")],-1),vr=(0,e.Uk)("eslint: "),_r={href:"http://eslint.org/docs/rules/template-curly-spacing",target:"_blank",rel:"noopener noreferrer"},fr=(0,e._)("code",null,"template-curly-spacing",-1),jr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>      <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),hr=(0,e._)("p",null,[(0,e._)("strong",null,"检查 NaN 的正确姿势是使用 isNaN()"),(0,e.Uk)("。")],-1),wr=(0,e.Uk)("eslint: "),yr={href:"http://eslint.org/docs/rules/use-isnan",target:"_blank",rel:"noopener noreferrer"},Ur=(0,e._)("code",null,"use-isnan",-1),xr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>      <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Er=(0,e._)("p",null,[(0,e._)("strong",null,"用合法的字符串跟 typeof 进行比较操作"),(0,e.Uk)("。")],-1),Wr=(0,e.Uk)("eslint: "),Fr={href:"http://eslint.org/docs/rules/valid-typeof",target:"_blank",rel:"noopener noreferrer"},qr=(0,e._)("code",null,"valid-typeof",-1),Jr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefimed&#39;</span>     <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span>     <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Sr=(0,e._)("p",null,[(0,e._)("strong",null,"自调用匿名函数 (IIFEs) 使用括号包裹"),(0,e.Uk)("。")],-1),Nr=(0,e.Uk)("eslint: "),Dr={href:"http://eslint.org/docs/rules/wrap-iife",target:"_blank",rel:"noopener noreferrer"},Or=(0,e._)("code",null,"wrap-iife",-1),Ar=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>\n\n<span class="token keyword">const</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n<span class="token keyword">const</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),Hr=(0,e._)("p",null,[(0,e._)("strong",null,"yield * 中的 * 前后都要有空格"),(0,e.Uk)("。")],-1),Cr=(0,e.Uk)("eslint: "),Tr={href:"http://eslint.org/docs/rules/yield-star-spacing",target:"_blank",rel:"noopener noreferrer"},Rr=(0,e._)("code",null,"yield-star-spacing",-1),zr=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">yield</span> <span class="token operator">*</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),$r=(0,e._)("p",null,[(0,e._)("strong",null,"请书写优雅的条件语句（avoid Yoda conditions）"),(0,e.Uk)("。")],-1),Ir=(0,e.Uk)("eslint: "),Mr={href:"http://eslint.org/docs/rules/yoda",target:"_blank",rel:"noopener noreferrer"},Pr=(0,e._)("code",null,"yoda",-1),Br=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">===</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Vr=(0,e._)("h2",{id:"关于分号",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#关于分号","aria-hidden":"true"},"#"),(0,e.Uk)(" 关于分号")],-1),Yr=(0,e.Uk)("不要使用分号。 (参见："),Lr={href:"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding",target:"_blank",rel:"noopener noreferrer"},Gr=(0,e.Uk)("1"),Kr=(0,e.Uk)("，"),Qr={href:"http://inimino.org/~inimino/blog/javascript_semicolons",target:"_blank",rel:"noopener noreferrer"},Xr=(0,e.Uk)("2"),Zr=(0,e.Uk)("，"),nu={href:"https://www.youtube.com/watch?v=gsfbh17Ax9I",target:"_blank",rel:"noopener noreferrer"},su=(0,e.Uk)("3"),au=(0,e.Uk)(")"),eu=(0,e.Uk)("eslint: "),pu={href:"http://eslint.org/docs/rules/semi",target:"_blank",rel:"noopener noreferrer"},lu=(0,e._)("code",null,"semi",-1),tu=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>\nwindow<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✗ avoid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),ou=(0,e._)("p",null,[(0,e.Uk)("不要使用 "),(0,e._)("code",null,"("),(0,e.Uk)(", "),(0,e._)("code",null,"["),(0,e.Uk)(", or ``` 等作为一行的开始。在没有分号的情况下代码压缩后会导致报错，而坚持这一规范则可避免出错。")],-1),cu=(0,e.Uk)("eslint: "),ru={href:"http://eslint.org/docs/rules/no-unexpected-multiline",target:"_blank",rel:"noopener noreferrer"},uu=(0,e._)("code",null,"no-unexpected-multiline",-1),iu=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>\n<span class="token punctuation">;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ✗ avoid</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>备注：上面的写法只能说聪明过头了。</p><p>相比更加可读易懂的代码，那些看似投巧的写法是不可取的。</p><p>譬如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>建议的写法是：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\nnums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',9),ku={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[l,t,o,c,r,(0,e._)("a",u,[i,(0,e.Wm)(a)])]),k,(0,e._)("ul",null,[(0,e._)("li",null,[m,(0,e._)("p",null,[d,(0,e._)("a",b,[g,(0,e.Wm)(a)])]),v]),(0,e._)("li",null,[_,(0,e._)("p",null,[f,(0,e._)("a",j,[h,(0,e.Wm)(a)])]),w]),(0,e._)("li",null,[y,(0,e._)("p",null,[U,(0,e._)("a",x,[E,(0,e.Wm)(a)])]),W]),(0,e._)("li",null,[F,(0,e._)("p",null,[q,(0,e._)("a",J,[S,(0,e.Wm)(a)])]),N]),(0,e._)("li",null,[D,(0,e._)("p",null,[O,(0,e._)("a",A,[H,(0,e.Wm)(a)])]),C]),(0,e._)("li",null,[T,(0,e._)("p",null,[R,(0,e._)("a",z,[$,(0,e.Wm)(a)])]),I]),(0,e._)("li",null,[M,(0,e._)("p",null,[P,(0,e._)("a",B,[V,(0,e.Wm)(a)])]),Y]),(0,e._)("li",null,[L,(0,e._)("p",null,[G,(0,e._)("a",K,[Q,(0,e.Wm)(a)])]),X]),(0,e._)("li",null,[Z,(0,e._)("p",null,[nn,(0,e._)("a",sn,[an,(0,e.Wm)(a)])]),en]),(0,e._)("li",null,[pn,(0,e._)("p",null,[ln,(0,e._)("a",tn,[on,(0,e.Wm)(a)])]),cn]),(0,e._)("li",null,[rn,(0,e._)("p",null,[un,(0,e._)("a",kn,[mn,(0,e.Wm)(a)])]),dn]),(0,e._)("li",null,[bn,(0,e._)("p",null,[gn,(0,e._)("a",vn,[_n,(0,e.Wm)(a)])]),fn]),(0,e._)("li",null,[jn,(0,e._)("p",null,[hn,(0,e._)("a",wn,[yn,(0,e.Wm)(a)])]),Un]),(0,e._)("li",null,[xn,(0,e._)("p",null,[En,(0,e._)("a",Wn,[Fn,(0,e.Wm)(a)])]),qn]),(0,e._)("li",null,[Jn,(0,e._)("p",null,[Sn,(0,e._)("a",Nn,[Dn,(0,e.Wm)(a)])]),On]),(0,e._)("li",null,[An,(0,e._)("p",null,[Hn,(0,e._)("a",Cn,[Tn,(0,e.Wm)(a)])]),Rn]),(0,e._)("li",null,[zn,(0,e._)("p",null,[$n,(0,e._)("a",In,[Mn,(0,e.Wm)(a)])]),Pn]),(0,e._)("li",null,[Bn,(0,e._)("p",null,[Vn,(0,e._)("a",Yn,[Ln,(0,e.Wm)(a)])]),Gn]),(0,e._)("li",null,[Kn,(0,e._)("p",null,[Qn,(0,e._)("a",Xn,[Zn,(0,e.Wm)(a)])]),ns]),(0,e._)("li",null,[ss,(0,e._)("p",null,[as,(0,e._)("a",es,[ps,(0,e.Wm)(a)])]),ls]),(0,e._)("li",null,[ts,(0,e._)("p",null,[os,(0,e._)("a",cs,[rs,(0,e.Wm)(a)])]),us]),(0,e._)("li",null,[is,(0,e._)("p",null,[ks,(0,e._)("a",ms,[ds,(0,e.Wm)(a)])])]),(0,e._)("li",null,[bs,(0,e._)("p",null,[gs,(0,e._)("a",vs,[_s,(0,e.Wm)(a)])]),fs]),(0,e._)("li",null,[js,(0,e._)("p",null,[hs,(0,e._)("a",ws,[ys,(0,e.Wm)(a)])]),Us]),(0,e._)("li",null,[xs,(0,e._)("p",null,[Es,(0,e._)("a",Ws,[Fs,(0,e.Wm)(a)])]),qs]),(0,e._)("li",null,[Js,(0,e._)("p",null,[Ss,(0,e._)("a",Ns,[Ds,(0,e.Wm)(a)])]),Os]),(0,e._)("li",null,[As,(0,e._)("p",null,[Hs,(0,e._)("a",Cs,[Ts,(0,e.Wm)(a)])]),Rs]),(0,e._)("li",null,[zs,(0,e._)("p",null,[$s,(0,e._)("a",Is,[Ms,(0,e.Wm)(a)])]),Ps]),(0,e._)("li",null,[Bs,(0,e._)("p",null,[Vs,(0,e._)("a",Ys,[Ls,(0,e.Wm)(a)])]),Gs]),(0,e._)("li",null,[Ks,(0,e._)("p",null,[Qs,(0,e._)("a",Xs,[Zs,(0,e.Wm)(a)])]),na]),(0,e._)("li",null,[sa,(0,e._)("p",null,[aa,(0,e._)("a",ea,[pa,(0,e.Wm)(a)])]),la]),(0,e._)("li",null,[ta,(0,e._)("p",null,[oa,(0,e._)("a",ca,[ra,(0,e.Wm)(a)])]),ua]),(0,e._)("li",null,[ia,(0,e._)("p",null,[ka,(0,e._)("a",ma,[da,(0,e.Wm)(a)])]),ba]),(0,e._)("li",null,[ga,(0,e._)("p",null,[va,(0,e._)("a",_a,[fa,(0,e.Wm)(a)])]),ja]),(0,e._)("li",null,[ha,(0,e._)("p",null,[wa,(0,e._)("a",ya,[Ua,(0,e.Wm)(a)])]),xa]),(0,e._)("li",null,[Ea,(0,e._)("p",null,[Wa,(0,e._)("a",Fa,[qa,(0,e.Wm)(a)])]),Ja]),(0,e._)("li",null,[Sa,(0,e._)("p",null,[Na,(0,e._)("a",Da,[Oa,(0,e.Wm)(a)])]),Aa]),(0,e._)("li",null,[Ha,(0,e._)("p",null,[Ca,(0,e._)("a",Ta,[Ra,(0,e.Wm)(a)])]),za]),(0,e._)("li",null,[$a,(0,e._)("p",null,[Ia,(0,e._)("a",Ma,[Pa,(0,e.Wm)(a)])]),Ba]),(0,e._)("li",null,[Va,(0,e._)("p",null,[Ya,(0,e._)("a",La,[Ga,(0,e.Wm)(a)])]),Ka]),(0,e._)("li",null,[Qa,(0,e._)("p",null,[Xa,(0,e._)("a",Za,[ne,(0,e.Wm)(a)])]),se]),(0,e._)("li",null,[ae,(0,e._)("p",null,[ee,(0,e._)("a",pe,[le,(0,e.Wm)(a)])]),te]),(0,e._)("li",null,[oe,(0,e._)("p",null,[ce,(0,e._)("a",re,[ue,(0,e.Wm)(a)])]),ie]),(0,e._)("li",null,[ke,(0,e._)("p",null,[me,(0,e._)("a",de,[be,(0,e.Wm)(a)])]),ge]),(0,e._)("li",null,[ve,(0,e._)("p",null,[_e,(0,e._)("a",fe,[je,(0,e.Wm)(a)])]),he]),(0,e._)("li",null,[we,(0,e._)("p",null,[ye,(0,e._)("a",Ue,[xe,(0,e.Wm)(a)])]),Ee]),(0,e._)("li",null,[We,(0,e._)("p",null,[Fe,(0,e._)("a",qe,[Je,(0,e.Wm)(a)])]),Se]),(0,e._)("li",null,[Ne,(0,e._)("p",null,[De,(0,e._)("a",Oe,[Ae,(0,e.Wm)(a)])]),He]),(0,e._)("li",null,[Ce,(0,e._)("p",null,[Te,(0,e._)("a",Re,[ze,(0,e.Wm)(a)])]),$e]),(0,e._)("li",null,[Ie,(0,e._)("p",null,[Me,(0,e._)("a",Pe,[Be,(0,e.Wm)(a)])]),Ve]),(0,e._)("li",null,[Ye,(0,e._)("p",null,[Le,(0,e._)("a",Ge,[Ke,(0,e.Wm)(a)])]),Qe]),(0,e._)("li",null,[Xe,(0,e._)("p",null,[Ze,(0,e._)("a",np,[sp,(0,e.Wm)(a)])]),ap]),(0,e._)("li",null,[ep,(0,e._)("p",null,[pp,(0,e._)("a",lp,[tp,(0,e.Wm)(a)])]),op]),(0,e._)("li",null,[cp,(0,e._)("p",null,[rp,(0,e._)("a",up,[ip,(0,e.Wm)(a)])]),kp]),(0,e._)("li",null,[mp,(0,e._)("p",null,[dp,(0,e._)("a",bp,[gp,(0,e.Wm)(a)])]),vp]),(0,e._)("li",null,[_p,(0,e._)("p",null,[fp,(0,e._)("a",jp,[hp,(0,e.Wm)(a)])]),wp]),(0,e._)("li",null,[yp,(0,e._)("p",null,[Up,(0,e._)("a",xp,[Ep,(0,e.Wm)(a)])]),Wp]),(0,e._)("li",null,[Fp,(0,e._)("p",null,[qp,(0,e._)("a",Jp,[Sp,(0,e.Wm)(a)])]),Np]),(0,e._)("li",null,[Dp,(0,e._)("p",null,[Op,(0,e._)("a",Ap,[Hp,(0,e.Wm)(a)])]),Cp]),(0,e._)("li",null,[Tp,(0,e._)("p",null,[Rp,(0,e._)("a",zp,[$p,(0,e.Wm)(a)])]),Ip]),(0,e._)("li",null,[Mp,(0,e._)("p",null,[Pp,(0,e._)("a",Bp,[Vp,(0,e.Wm)(a)])]),Yp]),(0,e._)("li",null,[Lp,(0,e._)("p",null,[Gp,(0,e._)("a",Kp,[Qp,(0,e.Wm)(a)])])]),(0,e._)("li",null,[Xp,(0,e._)("p",null,[Zp,(0,e._)("a",nl,[sl,(0,e.Wm)(a)])]),al]),(0,e._)("li",null,[el,(0,e._)("p",null,[pl,(0,e._)("a",ll,[tl,(0,e.Wm)(a)])]),ol]),(0,e._)("li",null,[cl,(0,e._)("p",null,[rl,(0,e._)("a",ul,[il,(0,e.Wm)(a)])]),kl]),(0,e._)("li",null,[ml,(0,e._)("p",null,[dl,(0,e._)("a",bl,[gl,(0,e.Wm)(a)])]),vl]),(0,e._)("li",null,[_l,(0,e._)("p",null,[fl,(0,e._)("a",jl,[hl,(0,e.Wm)(a)])]),wl]),(0,e._)("li",null,[yl,(0,e._)("p",null,[Ul,(0,e._)("a",xl,[El,(0,e.Wm)(a)])]),Wl]),(0,e._)("li",null,[Fl,(0,e._)("p",null,[ql,(0,e._)("a",Jl,[Sl,(0,e.Wm)(a)])]),Nl]),(0,e._)("li",null,[Dl,(0,e._)("p",null,[Ol,(0,e._)("a",Al,[Hl,(0,e.Wm)(a)])]),Cl]),(0,e._)("li",null,[Tl,(0,e._)("p",null,[Rl,(0,e._)("a",zl,[$l,(0,e.Wm)(a)])]),Il]),(0,e._)("li",null,[Ml,(0,e._)("p",null,[Pl,(0,e._)("a",Bl,[Vl,(0,e.Wm)(a)])]),Yl]),(0,e._)("li",null,[Ll,(0,e._)("p",null,[Gl,(0,e._)("a",Kl,[Ql,(0,e.Wm)(a)])]),Xl]),(0,e._)("li",null,[Zl,(0,e._)("p",null,[nt,(0,e._)("a",st,[at,(0,e.Wm)(a)])]),et]),(0,e._)("li",null,[pt,(0,e._)("p",null,[lt,(0,e._)("a",tt,[ot,(0,e.Wm)(a)])]),ct]),(0,e._)("li",null,[rt,(0,e._)("p",null,[ut,(0,e._)("a",it,[kt,(0,e.Wm)(a)])]),mt]),(0,e._)("li",null,[dt,(0,e._)("p",null,[bt,(0,e._)("a",gt,[vt,(0,e.Wm)(a)])]),_t]),(0,e._)("li",null,[ft,(0,e._)("p",null,[jt,(0,e._)("a",ht,[wt,(0,e.Wm)(a)])]),yt]),(0,e._)("li",null,[Ut,(0,e._)("p",null,[xt,(0,e._)("a",Et,[Wt,(0,e.Wm)(a)])]),Ft]),(0,e._)("li",null,[qt,(0,e._)("p",null,[Jt,(0,e._)("a",St,[Nt,(0,e.Wm)(a)])]),Dt]),(0,e._)("li",null,[Ot,(0,e._)("p",null,[At,(0,e._)("a",Ht,[Ct,(0,e.Wm)(a)])]),Tt]),(0,e._)("li",null,[Rt,(0,e._)("p",null,[zt,(0,e._)("a",$t,[It,(0,e.Wm)(a)])]),Mt]),(0,e._)("li",null,[Pt,(0,e._)("p",null,[Bt,(0,e._)("a",Vt,[Yt,(0,e.Wm)(a)])]),Lt]),(0,e._)("li",null,[Gt,(0,e._)("p",null,[Kt,(0,e._)("a",Qt,[Xt,(0,e.Wm)(a)])])]),(0,e._)("li",null,[Zt,(0,e._)("p",null,[no,(0,e._)("a",so,[ao,(0,e.Wm)(a)])]),eo]),(0,e._)("li",null,[po,(0,e._)("p",null,[lo,(0,e._)("a",to,[oo,(0,e.Wm)(a)])]),co]),(0,e._)("li",null,[ro,(0,e._)("p",null,[uo,(0,e._)("a",io,[ko,(0,e.Wm)(a)])]),mo]),(0,e._)("li",null,[bo,(0,e._)("p",null,[go,(0,e._)("a",vo,[_o,(0,e.Wm)(a)])])]),(0,e._)("li",null,[fo,(0,e._)("p",null,[jo,(0,e._)("a",ho,[wo,(0,e.Wm)(a)])]),yo]),(0,e._)("li",null,[Uo,(0,e._)("p",null,[xo,(0,e._)("a",Eo,[Wo,(0,e.Wm)(a)])]),Fo]),(0,e._)("li",null,[qo,(0,e._)("p",null,[Jo,(0,e._)("a",So,[No,(0,e.Wm)(a)])]),Do]),(0,e._)("li",null,[Oo,(0,e._)("p",null,[Ao,(0,e._)("a",Ho,[Co,(0,e.Wm)(a)])]),To]),(0,e._)("li",null,[Ro,(0,e._)("p",null,[zo,(0,e._)("a",$o,[Io,(0,e.Wm)(a)])]),Mo]),(0,e._)("li",null,[Po,(0,e._)("p",null,[Bo,(0,e._)("a",Vo,[Yo,(0,e.Wm)(a)])]),Lo]),(0,e._)("li",null,[Go,(0,e._)("p",null,[Ko,(0,e._)("a",Qo,[Xo,(0,e.Wm)(a)])]),Zo]),(0,e._)("li",null,[nc,(0,e._)("p",null,[sc,(0,e._)("a",ac,[ec,(0,e.Wm)(a)])]),pc]),(0,e._)("li",null,[lc,(0,e._)("p",null,[tc,(0,e._)("a",oc,[cc,(0,e.Wm)(a)])]),rc]),(0,e._)("li",null,[uc,(0,e._)("p",null,[ic,(0,e._)("a",kc,[mc,(0,e.Wm)(a)])]),dc]),(0,e._)("li",null,[bc,(0,e._)("p",null,[gc,(0,e._)("a",vc,[_c,(0,e.Wm)(a)])]),fc]),(0,e._)("li",null,[jc,(0,e._)("p",null,[hc,(0,e._)("a",wc,[yc,(0,e.Wm)(a)])]),Uc]),(0,e._)("li",null,[xc,(0,e._)("p",null,[Ec,(0,e._)("a",Wc,[Fc,(0,e.Wm)(a)])]),qc]),(0,e._)("li",null,[Jc,(0,e._)("p",null,[Sc,(0,e._)("a",Nc,[Dc,(0,e.Wm)(a)])]),Oc]),(0,e._)("li",null,[Ac,(0,e._)("p",null,[Hc,(0,e._)("a",Cc,[Tc,(0,e.Wm)(a)])]),Rc]),(0,e._)("li",null,[zc,(0,e._)("p",null,[$c,(0,e._)("a",Ic,[Mc,(0,e.Wm)(a)])]),Pc]),(0,e._)("li",null,[Bc,(0,e._)("p",null,[Vc,(0,e._)("a",Yc,[Lc,(0,e.Wm)(a)])]),Gc]),(0,e._)("li",null,[Kc,(0,e._)("p",null,[Qc,(0,e._)("a",Xc,[Zc,(0,e.Wm)(a)])]),nr]),(0,e._)("li",null,[sr,(0,e._)("p",null,[ar,(0,e._)("a",er,[pr,(0,e.Wm)(a)])]),lr]),(0,e._)("li",null,[tr,(0,e._)("p",null,[or,(0,e._)("a",cr,[rr,(0,e.Wm)(a)])]),ur]),(0,e._)("li",null,[ir,(0,e._)("p",null,[kr,(0,e._)("a",mr,[dr,(0,e.Wm)(a)])]),br]),(0,e._)("li",null,[gr,(0,e._)("p",null,[vr,(0,e._)("a",_r,[fr,(0,e.Wm)(a)])]),jr]),(0,e._)("li",null,[hr,(0,e._)("p",null,[wr,(0,e._)("a",yr,[Ur,(0,e.Wm)(a)])]),xr]),(0,e._)("li",null,[Er,(0,e._)("p",null,[Wr,(0,e._)("a",Fr,[qr,(0,e.Wm)(a)])]),Jr]),(0,e._)("li",null,[Sr,(0,e._)("p",null,[Nr,(0,e._)("a",Dr,[Or,(0,e.Wm)(a)])]),Ar]),(0,e._)("li",null,[Hr,(0,e._)("p",null,[Cr,(0,e._)("a",Tr,[Rr,(0,e.Wm)(a)])]),zr]),(0,e._)("li",null,[$r,(0,e._)("p",null,[Ir,(0,e._)("a",Mr,[Pr,(0,e.Wm)(a)])]),Br])]),Vr,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[Yr,(0,e._)("a",Lr,[Gr,(0,e.Wm)(a)]),Kr,(0,e._)("a",Qr,[Xr,(0,e.Wm)(a)]),Zr,(0,e._)("a",nu,[su,(0,e.Wm)(a)]),au]),(0,e._)("p",null,[eu,(0,e._)("a",pu,[lu,(0,e.Wm)(a)])]),tu]),(0,e._)("li",null,[ou,(0,e._)("p",null,[cu,(0,e._)("a",ru,[uu,(0,e.Wm)(a)])]),iu])])],64)}}}}]);